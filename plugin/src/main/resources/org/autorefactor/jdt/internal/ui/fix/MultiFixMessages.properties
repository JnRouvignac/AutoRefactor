CleanUpRefactoringWizard_IntPrimitiveRatherThanWrapperCleanUp_name=Int primitive rather than wrapper
CleanUpRefactoringWizard_IntPrimitiveRatherThanWrapperCleanUp_description=Replace Integer wrapper object by int primitive type when an object is not necessary.
CleanUpRefactoringWizard_IntPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_ShortPrimitiveRatherThanWrapperCleanUp_name=Short primitive rather than wrapper
CleanUpRefactoringWizard_ShortPrimitiveRatherThanWrapperCleanUp_description=Replace Short wrapper object by short primitive type when an object is not necessary.
CleanUpRefactoringWizard_ShortPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_LongPrimitiveRatherThanWrapperCleanUp_name=Long primitive rather than wrapper
CleanUpRefactoringWizard_LongPrimitiveRatherThanWrapperCleanUp_description=Replace Long wrapper object by long primitive type when an object is not necessary.
CleanUpRefactoringWizard_LongPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_DoublePrimitiveRatherThanWrapperCleanUp_name=Double primitive rather than wrapper
CleanUpRefactoringWizard_DoublePrimitiveRatherThanWrapperCleanUp_description=Replace Double wrapper object by double primitive type when an object is not necessary.
CleanUpRefactoringWizard_DoublePrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_FloatPrimitiveRatherThanWrapperCleanUp_name=Float primitive rather than wrapper
CleanUpRefactoringWizard_FloatPrimitiveRatherThanWrapperCleanUp_description=Replace Float wrapper object by float primitive type when an object is not necessary.
CleanUpRefactoringWizard_FloatPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_CharPrimitiveRatherThanWrapperCleanUp_name=Char primitive rather than wrapper
CleanUpRefactoringWizard_CharPrimitiveRatherThanWrapperCleanUp_description=Replace Character wrapper object by char primitive type when an object is not necessary.
CleanUpRefactoringWizard_CharPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_BytePrimitiveRatherThanWrapperCleanUp_name=Byte primitive rather than wrapper
CleanUpRefactoringWizard_BytePrimitiveRatherThanWrapperCleanUp_description=Replace Byte wrapper object by byte primitive type when an object is not necessary.
CleanUpRefactoringWizard_BytePrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_RemoveUselessNullCheckCleanUp_name=Remove useless null checks
CleanUpRefactoringWizard_RemoveUselessNullCheckCleanUp_description=Removes useless null checks before assignments or return statements.\nSuch useless null checks are comparing an expression against null,\nthen either assigning null or the expression depending on the result of the null check.\nIt is simpler to directly assign the expression.
CleanUpRefactoringWizard_RemoveUselessNullCheckCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_VectorOldToNewAPICleanUp_name=Collections APIs rather than Vector pre-Collections APIs
CleanUpRefactoringWizard_VectorOldToNewAPICleanUp_description=Replaces Vector pre-Collections APIs with equivalent Collections APIs.
CleanUpRefactoringWizard_VectorOldToNewAPICleanUp_reason=It makes the code more standard.
CleanUpRefactoringWizard_PrimitiveWrapperCreationCleanUp_name=Primitive wrapper creation
CleanUpRefactoringWizard_PrimitiveWrapperCreationCleanUp_description=Replaces unnecessary primitive wrappers instance creations by using static factory methods ("valueOf()") or existing constants.
CleanUpRefactoringWizard_PrimitiveWrapperCreationCleanUp_reason=It dramatically improves the space performance.
CleanUpRefactoringWizard_AutoBoxingRatherThanExplicitMethodCleanUp_name=AutoBoxing rather than explicit method
CleanUpRefactoringWizard_AutoBoxingRatherThanExplicitMethodCleanUp_description=Remove useless valueOf() call to use AutoBoxing.
CleanUpRefactoringWizard_AutoBoxingRatherThanExplicitMethodCleanUp_reason=AutoBoxing methods are automatically added by the compiler so it is useless. It improves the readability. It also upgrades legacy code.
CleanUpRefactoringWizard_UnboxingRatherThanExplicitMethodCleanUp_name=Unboxing rather than explicit method
CleanUpRefactoringWizard_UnboxingRatherThanExplicitMethodCleanUp_description=Remove useless primitiveValue() call to use unboxing.
CleanUpRefactoringWizard_UnboxingRatherThanExplicitMethodCleanUp_reason=UnBoxing methods are automatically added by the compiler so it is useless. It improves the readability. It also upgrades legacy code.
CleanUpRefactoringWizard_BracketsRatherThanArrayInstantiationCleanUp_name=Brackets rather than array instantiation
CleanUpRefactoringWizard_BracketsRatherThanArrayInstantiationCleanUp_description=Replace the new instance syntax by curly brackets to create an array when possible.
CleanUpRefactoringWizard_BracketsRatherThanArrayInstantiationCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_LambdaExpressionRatherThanComparatorCleanUp_name=Lambda expression rather than comparator
CleanUpRefactoringWizard_LambdaExpressionRatherThanComparatorCleanUp_description=Replace a plain comparator instance by a lambda expression passed to a Comparator.comparing() method.
CleanUpRefactoringWizard_LambdaExpressionRatherThanComparatorCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_LambdaCleanUp_name=Improve lambda expressions
CleanUpRefactoringWizard_LambdaCleanUp_description=Improve lambda expressions.
CleanUpRefactoringWizard_LambdaCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_LiteralRatherThanBooleanConstantCleanUp_name=Literal rather than boolean constant
CleanUpRefactoringWizard_LiteralRatherThanBooleanConstantCleanUp_description=Replace Boolean.TRUE/Boolean.FALSE by true/false on primitive assignment.
CleanUpRefactoringWizard_LiteralRatherThanBooleanConstantCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_BooleanCleanUp_name=Boolean
CleanUpRefactoringWizard_BooleanCleanUp_description=Boolean related refactorings:\n- remove if statements when then and else clauses do similar things with opposite boolean values,\n- remove ternary operators when then and else clauses do similar things with opposite boolean values,\n- simplify boolean expressions.
CleanUpRefactoringWizard_BooleanCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_BooleanPrimitiveRatherThanWrapperCleanUp_name=Boolean primitive rather than wrapper
CleanUpRefactoringWizard_BooleanPrimitiveRatherThanWrapperCleanUp_description=Replace Boolean wrapper object by boolean primitive type when an object is not necessary.
CleanUpRefactoringWizard_BooleanPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CleanUpRefactoringWizard_LazyLogicalRatherThanEagerCleanUp_name=Lazy logical rather than eager
CleanUpRefactoringWizard_LazyLogicalRatherThanEagerCleanUp_description=Replace && by &&&& and | by || when the right operand is passive.
CleanUpRefactoringWizard_LazyLogicalRatherThanEagerCleanUp_reason=It improves the time performance.
CleanUpRefactoringWizard_BooleanConstantRatherThanValueOfCleanUp_name=Boolean constant rather than valueOf()
CleanUpRefactoringWizard_BooleanConstantRatherThanValueOfCleanUp_description=Replace Boolean.valueOf(true) and Boolean.valueOf(false) by Boolean.TRUE and Boolean.FALSE.
CleanUpRefactoringWizard_BooleanConstantRatherThanValueOfCleanUp_reason=It improves the readability. It also improves the time performance.
CleanUpRefactoringWizard_BooleanEqualsRatherThanNullCheckCleanUp_name=Boolean equals() rather than null check
CleanUpRefactoringWizard_BooleanEqualsRatherThanNullCheckCleanUp_description=Replace a null check of a Boolean followed by its value by an equality with a boolean constant.
CleanUpRefactoringWizard_BooleanEqualsRatherThanNullCheckCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_XORRatherThanDuplicateConditionsCleanUp_name=XOR rather than duplicate conditions
CleanUpRefactoringWizard_XORRatherThanDuplicateConditionsCleanUp_description=Replace (X &&&& !Y) || (!X &&&& Y) by X ^ Y.
CleanUpRefactoringWizard_XORRatherThanDuplicateConditionsCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_ORConditionRatherThanRedundantClausesCleanUp_name=OR condition rather than redundant clauses
CleanUpRefactoringWizard_ORConditionRatherThanRedundantClausesCleanUp_description=Replace (X &&&& Y) || !X by Y || !X.
CleanUpRefactoringWizard_ORConditionRatherThanRedundantClausesCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_TernaryOperatorRatherThanDuplicateConditionsCleanUp_name=Ternary operator rather than duplicate conditions
CleanUpRefactoringWizard_TernaryOperatorRatherThanDuplicateConditionsCleanUp_description=Replace (X &&&& Y) || (!X &&&& Z) by X ? Y : Z.
CleanUpRefactoringWizard_TernaryOperatorRatherThanDuplicateConditionsCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_WorkWithNullCheckedExpressionFirstCleanUp_name=Work with null checked expressions first
CleanUpRefactoringWizard_WorkWithNullCheckedExpressionFirstCleanUp_description=Refactors if statements with a null checked expression to work with the not null case in the then clause and then work with the null case in the else clause.
CleanUpRefactoringWizard_WorkWithNullCheckedExpressionFirstCleanUp_reason=The readability is improved.
CleanUpRefactoringWizard_InvertEqualsCleanUp_name=Equals on constant rather than on variable
CleanUpRefactoringWizard_InvertEqualsCleanUp_description=Inverts calls to Object.equals(Object) and String.equalsIgnoreCase(String) when it is known that the second operand is not null and the first can be null. Beware! By avoiding null pointer, the behavior may change!
CleanUpRefactoringWizard_InvertEqualsCleanUp_reason=It avoids null pointer.
CleanUpRefactoringWizard_ComparisonCleanUp_name=Comparison to 0 rather than 1 or -1
CleanUpRefactoringWizard_ComparisonCleanUp_description=Fix Comparable.compareTo() usage. Beware! The behavior may change if you implement a custom comparator!
CleanUpRefactoringWizard_ComparisonCleanUp_reason=It standardizes the code.
CleanUpRefactoringWizard_DoubleCompareRatherThanEqualityCleanUp_name=Double compare rather than equality
CleanUpRefactoringWizard_DoubleCompareRatherThanEqualityCleanUp_description=Replace arithmetic comparison by Double.compare(). Beware! The behavior may change if your code run with a bug!
CleanUpRefactoringWizard_DoubleCompareRatherThanEqualityCleanUp_reason=It avoids computation errors.
CleanUpRefactoringWizard_RemoveUnneededThisExpressionCleanUp_name=Remove unneeded this expressions
CleanUpRefactoringWizard_RemoveUnneededThisExpressionCleanUp_description=Remove useless use of "this" from method calls.
CleanUpRefactoringWizard_RemoveUnneededThisExpressionCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_AggregateConstructorRatherThanGWTMethodCleanUp_name=Aggregate constructor rather than GWT method
CleanUpRefactoringWizard_AggregateConstructorRatherThanGWTMethodCleanUp_description=Use new ArrayList<>() and new HashMap<>() instead of using specific GWT Lists.newArrayList() and Maps.newHashMap().
CleanUpRefactoringWizard_AggregateConstructorRatherThanGWTMethodCleanUp_reason=With diamond operator in Java 7, those specific GWT methods are useless. It also reduces the dependency to libraries.
CleanUpRefactoringWizard_StandardMethodRatherThanLibraryMethodCleanUp_name=Standard method rather than Library method
CleanUpRefactoringWizard_StandardMethodRatherThanLibraryMethodCleanUp_description=Stop using ObjectUtils.equals(), ObjectUtils.hashCode(), ObjectUtils.hashCodeMulti() and ObjectUtils.toString() to use java.util.Objects methods instead.
CleanUpRefactoringWizard_StandardMethodRatherThanLibraryMethodCleanUp_reason=Those specific Apache and Google methods are deprecated. It also reduces the dependency to libraries.
CleanUpRefactoringWizard_StringRatherThanNewStringCleanUp_name=String rather than new string
CleanUpRefactoringWizard_StringRatherThanNewStringCleanUp_description=Removes a String instance from a String literal.
CleanUpRefactoringWizard_StringRatherThanNewStringCleanUp_reason=It improves the time and space performance. It also improves the readability.
CleanUpRefactoringWizard_StringCleanUp_name=String
CleanUpRefactoringWizard_StringCleanUp_description=Removes:\n- calling String.toString() on a String instance,\n- remove calls to String.toString() inside String concatenations,\n- replace useless case shifts for equality by equalsIgnoreCase()\nRefactors:\n- usages of 'indexOf' and 'lastIndexOf' with single letter in string
CleanUpRefactoringWizard_StringCleanUp_reason=It improves the time and space performance. It also improves the readability.
CleanUpRefactoringWizard_StringValueOfRatherThanConcatCleanUp_name=String.valueOf() rather than concatenation
CleanUpRefactoringWizard_StringValueOfRatherThanConcatCleanUp_description=Replace forced string transformation by String.valueOf().
CleanUpRefactoringWizard_StringValueOfRatherThanConcatCleanUp_reason=It improves the time and space performance.
CleanUpRefactoringWizard_BigNumberCleanUp_name=Big number
CleanUpRefactoringWizard_BigNumberCleanUp_description=Refactors to a proper use of BigDecimals and BigIntegers:\n- create BigDecimals or BigIntegers from Strings rather than floating point values,\n- create BigDecimals or BigIntegers from integers rather than String representing integers,\n- use BigDecimal or BigInteger constants,\n- replace calls to equals() with calls to compareTo().
CleanUpRefactoringWizard_BigNumberCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_OppositeComparisonRatherThanNegativeExpressionCleanUp_name=Opposite comparison rather than negative expression
CleanUpRefactoringWizard_OppositeComparisonRatherThanNegativeExpressionCleanUp_description=Reverse a comparison expression to avoid a minus prefix.
CleanUpRefactoringWizard_OppositeComparisonRatherThanNegativeExpressionCleanUp_reason=It improves the readability and the performance. It also fixes a SONAR alert (squid:S2676).
CleanUpRefactoringWizard_RemoveEmptyIfCleanUp_name=Remove empty if
CleanUpRefactoringWizard_RemoveEmptyIfCleanUp_description=Removes empty if or else block.
CleanUpRefactoringWizard_RemoveEmptyIfCleanUp_reason=It reduces code to focus attention on code that matters. It also improves the time performance.
CleanUpRefactoringWizard_InlineCodeRatherThanPeremptoryConditionCleanUp_name=Inline code rather than peremptory condition
CleanUpRefactoringWizard_InlineCodeRatherThanPeremptoryConditionCleanUp_description=Replace always true or always false condition by inline code.
CleanUpRefactoringWizard_InlineCodeRatherThanPeremptoryConditionCleanUp_reason=It disambiguates the code to improve the readability.
CleanUpRefactoringWizard_RemoveUselessBlockCleanUp_name=Remove useless block
CleanUpRefactoringWizard_RemoveUselessBlockCleanUp_description=Removes lone and embedded block.
CleanUpRefactoringWizard_RemoveUselessBlockCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_RemoveEmptyStatementCleanUp_name=Removes empty statements
CleanUpRefactoringWizard_RemoveEmptyStatementCleanUp_description=Removes structural statements with no substatement.
CleanUpRefactoringWizard_RemoveEmptyStatementCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_SingleDeclarationsRatherThanMultiDeclarationCleanUp_name=Single declarations rather than multi declaration
CleanUpRefactoringWizard_SingleDeclarationsRatherThanMultiDeclarationCleanUp_description=Write only one variable declaration per line.
CleanUpRefactoringWizard_SingleDeclarationsRatherThanMultiDeclarationCleanUp_reason=It makes the code more standard. It fixes the Sonar RSPEC-1659.
CleanUpRefactoringWizard_EndOfMethodRatherThanReturnCleanUp_name=End of method rather than return
CleanUpRefactoringWizard_EndOfMethodRatherThanReturnCleanUp_description=Removes useless lone return at the end of a method.
CleanUpRefactoringWizard_EndOfMethodRatherThanReturnCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_name=Do/while rather than while
CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_description=Replace while by do/while when the first evaluation is always true.
CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_reason=It improves the time performance.
CleanUpRefactoringWizard_DoWhileRatherThanDuplicateCodeCleanUp_name=Do/while rather than duplicate code
CleanUpRefactoringWizard_DoWhileRatherThanDuplicateCodeCleanUp_description=Replace while by do/while when the loop statements are duplicated before the loop.
CleanUpRefactoringWizard_DoWhileRatherThanDuplicateCodeCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_IfRatherThanWhileAndFallsThroughCleanUp_name=If rather than while and falls through
CleanUpRefactoringWizard_IfRatherThanWhileAndFallsThroughCleanUp_description=Replace a while loop that always terminates during the first iteration by an if.
CleanUpRefactoringWizard_IfRatherThanWhileAndFallsThroughCleanUp_reason=It disambiguates the code to improve the readability.
CleanUpRefactoringWizard_SuperCallRatherThanUselessOverridingCleanUp_name=Super call rather than useless overriding
CleanUpRefactoringWizard_SuperCallRatherThanUselessOverridingCleanUp_description=Removes overriding of method if the overriding only call the super class.
CleanUpRefactoringWizard_SuperCallRatherThanUselessOverridingCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code.
CleanUpRefactoringWizard_CollapseIfStatementCleanUp_name=Collapse if statements
CleanUpRefactoringWizard_CollapseIfStatementCleanUp_description=Merge inside if statement into the parent if statement.
CleanUpRefactoringWizard_CollapseIfStatementCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_CommonCodeInIfElseStatementCleanUp_name=Extract common code in if else statement
CleanUpRefactoringWizard_CommonCodeInIfElseStatementCleanUp_description=Factorizes common code in all if / else if / else statements at the end of each blocks.\nUltimately it removes the empty and passive if conditions.
CleanUpRefactoringWizard_CommonCodeInIfElseStatementCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_OppositeConditionRatherThanDuplicateConditionCleanUp_name=Opposite condition rather than duplicate condition
CleanUpRefactoringWizard_OppositeConditionRatherThanDuplicateConditionCleanUp_description=Do not repeat the same condition in several if.
CleanUpRefactoringWizard_OppositeConditionRatherThanDuplicateConditionCleanUp_reason=It reduces the reading, debugging and testing cost.
CleanUpRefactoringWizard_OneConditionRatherThanUnreachableBlockCleanUp_name=One condition rather than unreachable block
CleanUpRefactoringWizard_OneConditionRatherThanUnreachableBlockCleanUp_description=Detect two successive if conditions that are identical and remove the second one.
CleanUpRefactoringWizard_OneConditionRatherThanUnreachableBlockCleanUp_reason=It removes dead code.
CleanUpRefactoringWizard_MergeConditionalBlocksCleanUp_name=Merge conditional statements
CleanUpRefactoringWizard_MergeConditionalBlocksCleanUp_description=Merge adjacent if / else if / else statements with same code block.
CleanUpRefactoringWizard_MergeConditionalBlocksCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_name=One if rather than duplicate blocks that fall through
CleanUpRefactoringWizard_OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_description=Merge consecutive if statements with same code block that end with a jump statement.
CleanUpRefactoringWizard_OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp_name=One code that falls through rather than redundant blocks
CleanUpRefactoringWizard_OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp_description=Merge blocks that end with a jump statement into the following same code.
CleanUpRefactoringWizard_OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_ElseRatherThanOppositeConditionCleanUp_name=Else rather than opposite condition
CleanUpRefactoringWizard_ElseRatherThanOppositeConditionCleanUp_description=Remove a condition on an else that is opposite to the condition of the previous if. Beware! It may change the behavior if the code is transpiled in JavaScript for NaN values.
CleanUpRefactoringWizard_ElseRatherThanOppositeConditionCleanUp_reason=It improves readability.
CleanUpRefactoringWizard_GenericMapRatherThanRawMapCleanUp_name=Generic map rather than raw map
CleanUpRefactoringWizard_GenericMapRatherThanRawMapCleanUp_description=Genericize a map if possible.
CleanUpRefactoringWizard_GenericMapRatherThanRawMapCleanUp_reason=It reduces the bug hazard.
CleanUpRefactoringWizard_GenericListRatherThanRawListCleanUp_name=Generic list rather than raw list
CleanUpRefactoringWizard_GenericListRatherThanRawListCleanUp_description=Genericize a list if possible.
CleanUpRefactoringWizard_GenericListRatherThanRawListCleanUp_reason=It reduces the bug hazard.
CleanUpRefactoringWizard_UseDiamondOperatorCleanUp_name=Diamond operator
CleanUpRefactoringWizard_UseDiamondOperatorCleanUp_description=Refactors class instance creations to use the diamond operator wherever possible.
CleanUpRefactoringWizard_UseDiamondOperatorCleanUp_reason=It reduces the code to focus the attention on code that matters. It also upgrades legacy code.
CleanUpRefactoringWizard_UseMultiCatchCleanUp_name=Multi-catch
CleanUpRefactoringWizard_UseMultiCatchCleanUp_description=Refactors catch clauses with the same body to use Java 7's multi-catch.
CleanUpRefactoringWizard_UseMultiCatchCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also upgrades legacy code.
CleanUpRefactoringWizard_ContainsRatherThanLoopCleanUp_name=Collection.contains() rather than loop
CleanUpRefactoringWizard_ContainsRatherThanLoopCleanUp_description=Replace for loop with Collection.contains(Object obj).
CleanUpRefactoringWizard_ContainsRatherThanLoopCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_ContainsAllRatherThanLoopCleanUp_name=Collection.containsAll() rather than loop
CleanUpRefactoringWizard_ContainsAllRatherThanLoopCleanUp_description=Replace for loop with Collection.containsAll(Collection obj).
CleanUpRefactoringWizard_ContainsAllRatherThanLoopCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_CollectionCleanUp_name=Inited collection rather than new collection and Collection.addAll()
CleanUpRefactoringWizard_CollectionCleanUp_description=Replaces creating a new Collection, then invoking Collection.addAll() on it, by creating the new Collection with the other Collection as parameter.
CleanUpRefactoringWizard_CollectionCleanUp_reason=It reduces the reading and debugging cost.
CleanUpRefactoringWizard_AllInOneMethodRatherThanLoopCleanUp_name=All in one method rather than loop
CleanUpRefactoringWizard_AllInOneMethodRatherThanLoopCleanUp_description=Collection related refactorings:\n- replaces for/foreach loops to use Collections.addAll() where possible,\n- replaces for/foreach loops to use Collection.addAll() where possible,\n- replaces for/foreach loops to use Collection.removeAll() where possible.
CleanUpRefactoringWizard_AllInOneMethodRatherThanLoopCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_name=Objects equals rather than equals and null check
CleanUpRefactoringWizard_ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_description=Simplify the equality between two objects.
CleanUpRefactoringWizard_ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_reason=It improves readability. It is particularly useful for Eclipse-generated equals() method.
CleanUpRefactoringWizard_BreakRatherThanPassiveIterationsCleanUp_name=Break rather than passive loops
CleanUpRefactoringWizard_BreakRatherThanPassiveIterationsCleanUp_description=Add a break to avoid passive for loop iterations.
CleanUpRefactoringWizard_BreakRatherThanPassiveIterationsCleanUp_reason=It improves the time performance.
CleanUpRefactoringWizard_UpdateSetRatherThanTestingFirstCleanUp_name=Update set rather than testing first
CleanUpRefactoringWizard_UpdateSetRatherThanTestingFirstCleanUp_description=Set related refactorings:\n- replaces calls to Set.contains() immediately followed by Set.add() with straight calls to Set.add(),\n- replaces calls to Set.contains() immediately followed by Set.remove() with straight calls to Set.remove(). Beware! It may change the behavior if you use custom Set implementation!
CleanUpRefactoringWizard_UpdateSetRatherThanTestingFirstCleanUp_reason=It reduces the coding, reading and debugging time.
CleanUpRefactoringWizard_IsEmptyRatherThanSizeCleanUp_name=Empty test rather than size
CleanUpRefactoringWizard_IsEmptyRatherThanSizeCleanUp_description=Replaces some checks on Collection.size() or Map.size() with checks on isEmpty().
CleanUpRefactoringWizard_IsEmptyRatherThanSizeCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code.
CleanUpRefactoringWizard_MapCleanUp_name=Inited map rather than new map and Map.putAll()
CleanUpRefactoringWizard_MapCleanUp_description=Replaces creating a new Map, then invoking Map.putAll() on it, by creating the new Map with the other Map as parameter.
CleanUpRefactoringWizard_MapCleanUp_reason=It reduces the reading and debugging cost.
CleanUpRefactoringWizard_EntrySetRatherThanKeySetAndValueSearchCleanUp_name=Map.entrySet() rather than Map.keySet() and value search
CleanUpRefactoringWizard_EntrySetRatherThanKeySetAndValueSearchCleanUp_description=Convert for loops iterating on Map.keySet() to iterate on Map.entrySet() when possible. Beware! It may change the behavior if you use custom Map implementation!
CleanUpRefactoringWizard_EntrySetRatherThanKeySetAndValueSearchCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also improves the time and the space performance.
CleanUpRefactoringWizard_MethodOnMapRatherThanMethodOnKeySetCleanUp_name=Method on map rather than method on keyset
CleanUpRefactoringWizard_MethodOnMapRatherThanMethodOnKeySetCleanUp_description=Directly invoke methods on Map rather than on Map.keySet() when possible.
CleanUpRefactoringWizard_MethodOnMapRatherThanMethodOnKeySetCleanUp_reason=It reduces the coding, reading and debugging cost. It also improves the time and the space performance.
CleanUpRefactoringWizard_NoAssignmentInIfConditionCleanUp_name=No assignment in if condition
CleanUpRefactoringWizard_NoAssignmentInIfConditionCleanUp_description=Moves assignments inside an if condition before the if node.
CleanUpRefactoringWizard_NoAssignmentInIfConditionCleanUp_reason=It improves the readability and reduces the bug hazard.
CleanUpRefactoringWizard_DeclarationOutsideLoopRatherThanInsideCleanUp_name=Declaration outside loop rather than inside
CleanUpRefactoringWizard_DeclarationOutsideLoopRatherThanInsideCleanUp_description=Move declarations of variable inside a loop outside of the loop.
CleanUpRefactoringWizard_DeclarationOutsideLoopRatherThanInsideCleanUp_reason=It avoids to recreate the same variable. So it improves the time and memory performance.
CleanUpRefactoringWizard_IfElseIfCleanUp_name=if-elseif
CleanUpRefactoringWizard_IfElseIfCleanUp_description=Refactors "else { if (...) {} }" to "else if (...) {}".
CleanUpRefactoringWizard_IfElseIfCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_CommonIfInIfElseCleanUp_name=Move common inner if statement from then/else clauses around outer if statement
CleanUpRefactoringWizard_CommonIfInIfElseCleanUp_description=Moves an inner if statement around the outer if condition, when the inner if condition is common to both if/else clauses of the outer if statement.
CleanUpRefactoringWizard_CommonIfInIfElseCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CleanUpRefactoringWizard_StringBuilderCleanUp_name=StringBuilder
CleanUpRefactoringWizard_StringBuilderCleanUp_description=Refactors to a proper use of StringBuilders:\n- replace String concatenations using operator '+' as parameters of StringBuffer/StringBuilder.append(),\n- replace chained call to StringBuffer/StringBuilder constructor followed by calls to append() and call toString() with straight String concatenation using operator '+'.
CleanUpRefactoringWizard_StringBuilderCleanUp_reason=It improves the time and space performance. It also improves the readability. String concatenation is automatically converted as StringBuilder by the compiler so it is useless.
CleanUpRefactoringWizard_StringBuilderMethodRatherThanReassignationCleanUp_name=StringBuilder method call rather than reassignment
CleanUpRefactoringWizard_StringBuilderMethodRatherThanReassignationCleanUp_description=Removes the assignment to the same variable on a StringBuilder.append() call.
CleanUpRefactoringWizard_StringBuilderMethodRatherThanReassignationCleanUp_reason=It reduces the code to focus the attention on code that matters.
CleanUpRefactoringWizard_StringBuilderRatherThanStringBufferCleanUp_name=StringBuilder rather than StringBuffer
CleanUpRefactoringWizard_StringBuilderRatherThanStringBufferCleanUp_description=Replace StringBuffer by StringBuilder when possible.
CleanUpRefactoringWizard_StringBuilderRatherThanStringBufferCleanUp_reason=It improves the time performance.
CleanUpRefactoringWizard_HashMapRatherThanHashtableCleanUp_name=HashMap rather than Hashtable
CleanUpRefactoringWizard_HashMapRatherThanHashtableCleanUp_description=Replace Hashtable by HashMap when possible.
CleanUpRefactoringWizard_HashMapRatherThanHashtableCleanUp_reason=It improves the time performance.
CleanUpRefactoringWizard_ArrayListRatherThanVectorCleanUp_name=ArrayList rather than Vector
CleanUpRefactoringWizard_ArrayListRatherThanVectorCleanUp_description=Replace Vector by ArrayList when possible.
CleanUpRefactoringWizard_ArrayListRatherThanVectorCleanUp_reason=It improves the time performance.
CleanUpRefactoringWizard_ArrayDequeRatherThanStackCleanUp_name=ArrayDeque rather than Stack
CleanUpRefactoringWizard_ArrayDequeRatherThanStackCleanUp_description=Replace Stack by ArrayDeque when possible.
CleanUpRefactoringWizard_ArrayDequeRatherThanStackCleanUp_reason=It improves the time performance.
CleanUpRefactoringWizard_SetRatherThanMapCleanUp_name=Set rather than map
CleanUpRefactoringWizard_SetRatherThanMapCleanUp_description=Replace map by set when values are not read.
CleanUpRefactoringWizard_SetRatherThanMapCleanUp_reason=It simplify the code showing that the values are not used.
CleanUpRefactoringWizard_ArrayListRatherThanLinkedListCleanUp_name=ArrayList rather than LinkedList
CleanUpRefactoringWizard_ArrayListRatherThanLinkedListCleanUp_description=Replace LinkedList by ArrayList when no item is inserted or removed in the middle of the list.
CleanUpRefactoringWizard_ArrayListRatherThanLinkedListCleanUp_reason=It improves the time and space performance.
CleanUpRefactoringWizard_SetRatherThanListCleanUp_name=Set rather than List
CleanUpRefactoringWizard_SetRatherThanListCleanUp_description=Replace List by HashSet when only presence of items is used.
CleanUpRefactoringWizard_SetRatherThanListCleanUp_reason=It improves the space performance.
CleanUpRefactoringWizard_HashMapRatherThanTreeMapCleanUp_name=HashMap rather than TreeMap
CleanUpRefactoringWizard_HashMapRatherThanTreeMapCleanUp_description=Replace TreeMap by HashMap when the entry order is not used.
CleanUpRefactoringWizard_HashMapRatherThanTreeMapCleanUp_reason=It improves the time and the space performance.
CleanUpRefactoringWizard_HashSetRatherThanTreeSetCleanUp_name=HashSet rather than TreeSet
CleanUpRefactoringWizard_HashSetRatherThanTreeSetCleanUp_description=Replace TreeSet by HashSet when the entry order is not used.
CleanUpRefactoringWizard_HashSetRatherThanTreeSetCleanUp_reason=It improves the time and the space performance.
CleanUpRefactoringWizard_UseStringContainsCleanUp_name=Use String.contains()
CleanUpRefactoringWizard_UseStringContainsCleanUp_description=Replaces uses of String.indexOf(String) String.lastIndexOf(String) by String.contains(CharSequence) where appropriate.
CleanUpRefactoringWizard_UseStringContainsCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code.
CleanUpRefactoringWizard_CommentsCleanUp_name=Comments
CleanUpRefactoringWizard_CommentsCleanUp_description=Refactors comments:\n- remove empty comments and javadocs,\n- transform comments applicable to java elements into javadocs,\n- transform javadocs that are not attached to any java elements into block comments,\n- remove IDE generated TODOs,\n- remove empty lines at start and end of javadocs and block comments,\n- uppercase first letter of javadocs,\n- collapse javadocs on a single line when allowed by Eclipse settings for formatting,\n- add final '.' to javadocs that do not have any,\n- remove Eclipse generated (non-Javadoc) block comments.
CleanUpRefactoringWizard_CommentsCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_RemoveFieldsDefaultValuesCleanUp_name=Remove fields default values
CleanUpRefactoringWizard_RemoveFieldsDefaultValuesCleanUp_description=Removes field initializers when they are the default value of the field's types.\nFor example, the initializer will be removed for integer fields initialized to "0".\nLikewise, the initializer will be removed for non primitive fields initialized to "null".
CleanUpRefactoringWizard_RemoveFieldsDefaultValuesCleanUp_reason=It reduces the code to focus the attention on the other non-default initializations.
CleanUpRefactoringWizard_StaticConstantRatherThanInstanceConstantCleanUp_name=Static constant rather than instance constant
CleanUpRefactoringWizard_StaticConstantRatherThanInstanceConstantCleanUp_description=Add the static modifier to the initialized final primitive or wrapper fields.
CleanUpRefactoringWizard_StaticConstantRatherThanInstanceConstantCleanUp_reason=It improves the space performance.
CleanUpRefactoringWizard_RemoveOverridenAssignmentCleanUp_name=Remove overridden assignment
CleanUpRefactoringWizard_RemoveOverridenAssignmentCleanUp_description=Remove passive assignment when the variable is reassigned before being read.
CleanUpRefactoringWizard_RemoveOverridenAssignmentCleanUp_reason=It improves the readability. It also improves the time and the space performance.
CleanUpRefactoringWizard_Java7HashRatherThanEclipseJava6HashCleanUp_name=Java 7 hash rather than Eclipse Java 6 hash
CleanUpRefactoringWizard_Java7HashRatherThanEclipseJava6HashCleanUp_description=Rewrites Eclipse-autogenerated hashcode method by Eclipse-autogenerated hashcode method for Java 7.
CleanUpRefactoringWizard_Java7HashRatherThanEclipseJava6HashCleanUp_reason=It improves readability. It does not improve performance.
CleanUpRefactoringWizard_HotSpotIntrinsicedAPIsCleanUp_name=HotSpot intrinsiced APIs
CleanUpRefactoringWizard_HotSpotIntrinsicedAPIsCleanUp_description=Refactors code patterns to use intrinsiced APIs in Hotspot JVM.\nIntrinsics are APIs that receive special treatment when JITed: they can be compiled down to use very efficient CPU instructions.
CleanUpRefactoringWizard_HotSpotIntrinsicedAPIsCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_AnnotationCleanUp_name=Annotation
CleanUpRefactoringWizard_AnnotationCleanUp_description=Simplifies annotation uses:\n- empty parentheses will be removed from annotations,\n- single members named "value" will be removed from annotations and only the value will be left.
CleanUpRefactoringWizard_AnnotationCleanUp_reason=It improves the readability.
CleanUpRefactoringWizard_TryWithResourceCleanUp_name=Use try-with-resource
CleanUpRefactoringWizard_TryWithResourceCleanUp_description=Changes code to make use of Java 7 try-with-resources feature. In particular, it removes now useless finally clauses.
CleanUpRefactoringWizard_TryWithResourceCleanUp_reason=It improves the readability. It also upgrades legacy code.
CleanUpRefactoringWizard_TestNGAssertCleanUp_name=TestNG asserts
CleanUpRefactoringWizard_TestNGAssertCleanUp_description=Refactors to a proper use of TestNG assertions.
CleanUpRefactoringWizard_TestNGAssertCleanUp_reason=It improves the readability of the code and the report.
CleanUpRefactoringWizard_JUnitAssertCleanUp_name=JUnit asserts
CleanUpRefactoringWizard_JUnitAssertCleanUp_description=Refactors to a proper use of JUnit assertions.
CleanUpRefactoringWizard_JUnitAssertCleanUp_reason=It improves the readability of the code and the report.
CleanUpRefactoringWizard_RemoveEmptyLinesCleanUp_name=Remove empty lines
CleanUpRefactoringWizard_RemoveEmptyLinesCleanUp_description=Removes unnecessary empty lines from source code:\n- empty lines after opening braces,\n- empty lines before closing braces,\n- two consecutive empty lines are converted to a single empty line.
CleanUpRefactoringWizard_RemoveEmptyLinesCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_RemoveEmptySuperConstrInvocationCleanUp_name=Remove super() call in constructor
CleanUpRefactoringWizard_RemoveEmptySuperConstrInvocationCleanUp_description=Remove call to super constructor with empty arguments since it is redundant. See JLS section 12.5 for more info.
CleanUpRefactoringWizard_RemoveEmptySuperConstrInvocationCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_name=Implicit default constructor rather than written one
CleanUpRefactoringWizard_ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_description=Remove single public constructor with no arguments, no annotation and no code.
CleanUpRefactoringWizard_ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_reason=It improves the readability of a such case to spotlight the complexity of other code.
CleanUpRefactoringWizard_AndroidWakeLockCleanUp_name=Android WakeLock
CleanUpRefactoringWizard_AndroidWakeLockCleanUp_description=Android - Failing to release a wakelock properly can keep the Android device in a high power mode, which reduces battery life. There are several causes for this, such as releasing the wake lock in onDestroy() instead of in onPause(), failing to call release() in all possible code paths after an acquire(), and so on.
CleanUpRefactoringWizard_AndroidWakeLockCleanUp_reason=It improves the performance.
CleanUpRefactoringWizard_AndroidViewHolderCleanUp_name=Android ViewHolder
CleanUpRefactoringWizard_AndroidViewHolderCleanUp_description=Android - Optimize getView() routines for Android applications. It reduces the number calls to the costly inflate()) and getViewById() Android API methods.
CleanUpRefactoringWizard_AndroidViewHolderCleanUp_reason=It improves the performance.
CleanUpRefactoringWizard_LogParametersRatherThanLogMessageCleanUp_name=Log parameters rather than log message
CleanUpRefactoringWizard_LogParametersRatherThanLogMessageCleanUp_description=Replaces a string concatenation as parameter of a logger method by a string template followed by objects.
CleanUpRefactoringWizard_LogParametersRatherThanLogMessageCleanUp_reason=It improves the time performance. It also avoids some null pointers.
CleanUpRefactoringWizard_NamedMethodRatherThanLogLevelParameterCleanUp_name=Named method rather than log level parameter
CleanUpRefactoringWizard_NamedMethodRatherThanLogLevelParameterCleanUp_description=Replaces level parameter by the appropriate method for standard logging.
CleanUpRefactoringWizard_NamedMethodRatherThanLogLevelParameterCleanUp_reason=It improves readability. Level parameter should be used only for dynamic level.
CleanUpRefactoringWizard_EnumMapRatherThanHashMapCleanUp_name=EnumMap rather than HashMap for enum keys
CleanUpRefactoringWizard_EnumMapRatherThanHashMapCleanUp_description=Refactor implementation class HashMap -> EnumMap when key is an enum type. Beware! It changes the result of an instanceof expression!
CleanUpRefactoringWizard_EnumMapRatherThanHashMapCleanUp_reason=It improves the space performance.
CleanUpRefactoringWizard_EnumSetRatherThanHashSetCleanUp_name=EnumSet rather than HashSet for enum types
CleanUpRefactoringWizard_EnumSetRatherThanHashSetCleanUp_description=Converts creation of HashSet with enum as a type to invocation of static methods of EnumSet where possible. Beware! It changes the result of an instanceof expression!
CleanUpRefactoringWizard_EnumSetRatherThanHashSetCleanUp_reason=It improves the space performance.
CleanUpRefactoringWizard_RemoveUncheckedThrowsClausesCleanUp_name=Remove unchecked exceptions from throws clause
CleanUpRefactoringWizard_RemoveUncheckedThrowsClausesCleanUp_description=Remove unchecked exceptions from throws clause. Beware, the JavaDoc is not updated!
CleanUpRefactoringWizard_RemoveUncheckedThrowsClausesCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_CapitalizeLongLiteralCleanUp_name=Capitalize lower case 'l' -> 'L' for long number literals
CleanUpRefactoringWizard_CapitalizeLongLiteralCleanUp_description=Capitalize lower case 'l' -> 'L' for long number literals
CleanUpRefactoringWizard_CapitalizeLongLiteralCleanUp_reason=It disambiguates the code to reduce bug hazard.
CleanUpRefactoringWizard_SwitchCleanUp_name=Switch
CleanUpRefactoringWizard_SwitchCleanUp_description=Switch related refactorings:\n- replaces if/else if/else blocks to use switch where possible.
CleanUpRefactoringWizard_SwitchCleanUp_reason=It reduces the coding, reading and debugging cost.
CleanUpRefactoringWizard_IfRatherThanTwoSwitchCasesCleanUp_name=If rather than two switch cases
CleanUpRefactoringWizard_IfRatherThanTwoSwitchCasesCleanUp_description=Replace a switch structure by an if block when there are less than three distinct cases. Beware! It may fix some null pointers, so it may change the behavior.
CleanUpRefactoringWizard_IfRatherThanTwoSwitchCasesCleanUp_reason=It improves readability. It also fixes SONAR alerts.
CleanUpRefactoringWizard_RemoveSemiColonCleanUp_name=Remove semicolons
CleanUpRefactoringWizard_RemoveSemiColonCleanUp_description=Removes superfluous semicolon after body declarations in type declarations.
CleanUpRefactoringWizard_RemoveSemiColonCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_AddBracketsToControlStatementCleanUp_name=Add brackets to control statement
CleanUpRefactoringWizard_AddBracketsToControlStatementCleanUp_description=Adds brackets to:\n- if then/else clauses,\n- for loop body,\n- do ... while loop body,\n- while loop body.
CleanUpRefactoringWizard_AddBracketsToControlStatementCleanUp_reason=It improves the readability and reduce the bug hazard.
CleanUpRefactoringWizard_RemoveUnnecessaryLocalBeforeReturnCleanUp_name=Remove unnecessary local before return
CleanUpRefactoringWizard_RemoveUnnecessaryLocalBeforeReturnCleanUp_description=Removes unnecessary local variable declaration or unnecessary variable assignment before a return statement.
CleanUpRefactoringWizard_RemoveUnnecessaryLocalBeforeReturnCleanUp_reason=It reduces code to focus attention on code that matters. It also improves time performance.
CleanUpRefactoringWizard_RedundantModifiersCleanUp_name=Remove useless modifiers
CleanUpRefactoringWizard_RedundantModifiersCleanUp_description=Sorts modifiers.\nAlso removes modifiers implied by the context:\n- "static" and "abstract" for interface,\n- "public", "static" and "final" for interface fields,\n- "public" and "abstract" for interface methods,\n- "final" for private methods,\n- "final" for parameters in interface method declarations,- "protected" modifier for final class not inherited members.
CleanUpRefactoringWizard_RedundantModifiersCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_RemoveUnnecessaryCastCleanUp_name=Remove unnecessary casts
CleanUpRefactoringWizard_RemoveUnnecessaryCastCleanUp_description=Removes unnecessary widening casts from return statements, assignments and infix expressions. Correctly types literals.
CleanUpRefactoringWizard_RemoveUnnecessaryCastCleanUp_reason=It reduces code to focus attention on code that matters. It also improves the time and the space performance.
CleanUpRefactoringWizard_PushNegationDownCleanUp_name=Push negation down
CleanUpRefactoringWizard_PushNegationDownCleanUp_description=Pushes negations down, inside the negated expressions.
CleanUpRefactoringWizard_PushNegationDownCleanUp_reason=It disambiguates the code to reduce bug hazard.
CleanUpRefactoringWizard_SimpleNameRatherThanQualifiedNameCleanUp_name=Simple name rather than qualified name
CleanUpRefactoringWizard_SimpleNameRatherThanQualifiedNameCleanUp_description=Refactors types, method invocations and field accesses to replace qualified names by simple names when appropriate. For example when relevant imports exist.
CleanUpRefactoringWizard_SimpleNameRatherThanQualifiedNameCleanUp_reason=It reduces code to focus attention on code that matters.
CleanUpRefactoringWizard_SimplifyExpressionCleanUp_name=Simplify expressions
CleanUpRefactoringWizard_SimplifyExpressionCleanUp_description=Simplifies Java expressions:\n- remove redundant null checks or useless right-hand side or left-hand side operands,\n- remove useless parentheses,\n- directly check boolean values instead of comparing them with true/false,\n- reduce double negation in boolean expression.
CleanUpRefactoringWizard_SimplifyExpressionCleanUp_reason=It improves the readability and the performance.
