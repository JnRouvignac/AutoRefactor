IntPrimitiveRatherThanWrapperCleanUp_name=Int primitive rather than wrapper
IntPrimitiveRatherThanWrapperCleanUp_description=Replace Integer wrapper object by int primitive type when an object is not necessary.
IntPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
ShortPrimitiveRatherThanWrapperCleanUp_name=Short primitive rather than wrapper
ShortPrimitiveRatherThanWrapperCleanUp_description=Replace Short wrapper object by short primitive type when an object is not necessary.
ShortPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
LongPrimitiveRatherThanWrapperCleanUp_name=Long primitive rather than wrapper
LongPrimitiveRatherThanWrapperCleanUp_description=Replace Long wrapper object by long primitive type when an object is not necessary.
LongPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
DoublePrimitiveRatherThanWrapperCleanUp_name=Double primitive rather than wrapper
DoublePrimitiveRatherThanWrapperCleanUp_description=Replace Double wrapper object by double primitive type when an object is not necessary.
DoublePrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
FloatPrimitiveRatherThanWrapperCleanUp_name=Float primitive rather than wrapper
FloatPrimitiveRatherThanWrapperCleanUp_description=Replace Float wrapper object by float primitive type when an object is not necessary.
FloatPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CharPrimitiveRatherThanWrapperCleanUp_name=Char primitive rather than wrapper
CharPrimitiveRatherThanWrapperCleanUp_description=Replace Character wrapper object by char primitive type when an object is not necessary.
CharPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
BytePrimitiveRatherThanWrapperCleanUp_name=Byte primitive rather than wrapper
BytePrimitiveRatherThanWrapperCleanUp_description=Replace Byte wrapper object by byte primitive type when an object is not necessary.
BytePrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
AssignRatherThanFilterThenAssignAnywayCleanUp_name=Assign rather than filter then assign anyway
AssignRatherThanFilterThenAssignAnywayCleanUp_description=Removes useless bad value checks before assignments or return statements.\nSuch useless bad value checks are comparing an expression against bad value,\nthen either assigning bad value or the expression depending on the result of the bad value check.\nIt is simpler to directly assign the expression.
AssignRatherThanFilterThenAssignAnywayCleanUp_reason=It reduces code to focus attention on what matters.
AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_name=Assign rather than ternary filter then assign anyway
AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_description=Removes useless bad value checks before assignments or return statements.\nSuch useless bad value checks are comparing an expression against bad value,\nthen either assigning bad value or the expression depending on the result of the bad value check.\nIt is simpler to directly assign the expression.
AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_reason=It reduces code to focus attention on what matters.
VectorOldToNewAPICleanUp_name=Collections APIs rather than Vector pre-Collections APIs
VectorOldToNewAPICleanUp_description=Replaces Vector pre-Collections APIs with equivalent Collections APIs.
VectorOldToNewAPICleanUp_reason=It makes the code more standard.
PrimitiveWrapperCreationCleanUp_name=Primitive wrapper creation
PrimitiveWrapperCreationCleanUp_description=Replaces unnecessary primitive wrappers instance creations by using static factory methods ("valueOf()") or existing constants.
PrimitiveWrapperCreationCleanUp_reason=It dramatically improves the space performance.
AutoBoxingRatherThanExplicitMethodCleanUp_name=AutoBoxing rather than explicit method
AutoBoxingRatherThanExplicitMethodCleanUp_description=Remove useless valueOf() call to use AutoBoxing.
AutoBoxingRatherThanExplicitMethodCleanUp_reason=AutoBoxing methods are automatically added by the compiler so it is useless. It improves the readability. It also upgrades legacy code.
UnboxingRatherThanExplicitMethodCleanUp_name=Unboxing rather than explicit method
UnboxingRatherThanExplicitMethodCleanUp_description=Remove useless primitiveValue() call to use unboxing.
UnboxingRatherThanExplicitMethodCleanUp_reason=UnBoxing methods are automatically added by the compiler so it is useless. It improves the readability. It also upgrades legacy code.
BracketsRatherThanArrayInstantiationCleanUp_name=Brackets rather than array instantiation
BracketsRatherThanArrayInstantiationCleanUp_description=Replace the new instance syntax by curly brackets to create an array when possible.
BracketsRatherThanArrayInstantiationCleanUp_reason=It reduces code to focus attention on what matters.
LambdaExpressionRatherThanComparatorCleanUp_name=Lambda expression rather than comparator
LambdaExpressionRatherThanComparatorCleanUp_description=Replace a plain comparator instance by a lambda expression passed to a Comparator.comparing() method.
LambdaExpressionRatherThanComparatorCleanUp_reason=It improves the readability.
LambdaCleanUp_name=Improve lambda expressions
LambdaCleanUp_description=Improve lambda expressions.
LambdaCleanUp_reason=It reduces code to focus attention on what matters.
LiteralRatherThanBooleanConstantCleanUp_name=Literal rather than boolean constant
LiteralRatherThanBooleanConstantCleanUp_description=Replace Boolean.TRUE/Boolean.FALSE by true/false on primitive assignment.
LiteralRatherThanBooleanConstantCleanUp_reason=It improves the readability.
BooleanCleanUp_name=Boolean
BooleanCleanUp_description=Boolean related refactorings:\n- remove if statements when then and else clauses do similar things with opposite boolean values,\n- remove ternary operators when then and else clauses do similar things with opposite boolean values,\n- simplify boolean expressions.
BooleanCleanUp_reason=It reduces code to focus attention on what matters.
BooleanPrimitiveRatherThanWrapperCleanUp_name=Boolean primitive rather than wrapper
BooleanPrimitiveRatherThanWrapperCleanUp_description=Replace Boolean wrapper object by boolean primitive type when an object is not necessary.
BooleanPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
LazyLogicalRatherThanEagerCleanUp_name=Lazy logical rather than eager
LazyLogicalRatherThanEagerCleanUp_description=Replace && by &&&& and | by || when the right operand is passive.
LazyLogicalRatherThanEagerCleanUp_reason=It improves the time performance.
BooleanConstantRatherThanValueOfCleanUp_name=Boolean constant rather than valueOf()
BooleanConstantRatherThanValueOfCleanUp_description=Replace Boolean.valueOf(true) and Boolean.valueOf(false) by Boolean.TRUE and Boolean.FALSE.
BooleanConstantRatherThanValueOfCleanUp_reason=It improves the readability. It also improves the time performance.
BooleanEqualsRatherThanNullCheckCleanUp_name=Boolean equals() rather than null check
BooleanEqualsRatherThanNullCheckCleanUp_description=Replace a null check of a Boolean followed by its value by an equality with a boolean constant.
BooleanEqualsRatherThanNullCheckCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
XORRatherThanDuplicateConditionsCleanUp_name=XOR rather than duplicate conditions
XORRatherThanDuplicateConditionsCleanUp_description=Replace (X &&&& !Y) || (!X &&&& Y) by X ^ Y.
XORRatherThanDuplicateConditionsCleanUp_reason=It improves the readability.
ORConditionRatherThanRedundantClausesCleanUp_name=OR condition rather than redundant clauses
ORConditionRatherThanRedundantClausesCleanUp_description=Replace (X &&&& Y) || !X by Y || !X.
ORConditionRatherThanRedundantClausesCleanUp_reason=It improves the readability.
TernaryOperatorRatherThanDuplicateConditionsCleanUp_name=Ternary operator rather than duplicate conditions
TernaryOperatorRatherThanDuplicateConditionsCleanUp_description=Replace (X &&&& Y) || (!X &&&& Z) by X ? Y : Z.
TernaryOperatorRatherThanDuplicateConditionsCleanUp_reason=It improves the readability.
InvertEqualsCleanUp_name=Equals on constant rather than on variable
InvertEqualsCleanUp_description=Inverts calls to Object.equals(Object) and String.equalsIgnoreCase(String) when it is known that the second operand is not null and the first can be null. Beware! By avoiding null pointer, the behavior may change!
InvertEqualsCleanUp_reason=It avoids null pointer.
ComparisonCleanUp_name=Comparison to 0 rather than 1 or -1
ComparisonCleanUp_description=Fix Comparable.compareTo() usage. Beware! The behavior may change if you implement a custom comparator!
ComparisonCleanUp_reason=It standardizes the code.
DoubleCompareRatherThanEqualityCleanUp_name=Double compare rather than equality
DoubleCompareRatherThanEqualityCleanUp_description=Replace arithmetic comparison by Double.compare(). Beware! The behavior may change if your code run with a bug!
DoubleCompareRatherThanEqualityCleanUp_reason=It avoids computation errors.
RemoveUnneededThisExpressionCleanUp_name=Remove unneeded this expressions
RemoveUnneededThisExpressionCleanUp_description=Remove useless use of "this" from method calls.
RemoveUnneededThisExpressionCleanUp_reason=It reduces code to focus attention on what matters.
AggregateConstructorRatherThanGWTMethodCleanUp_name=Aggregate constructor rather than GWT method
AggregateConstructorRatherThanGWTMethodCleanUp_description=Use new ArrayList<>() and new HashMap<>() instead of using specific GWT Lists.newArrayList() and Maps.newHashMap().
AggregateConstructorRatherThanGWTMethodCleanUp_reason=With diamond operator in Java 7, those specific GWT methods are useless. It also reduces the dependency to libraries.
StandardMethodRatherThanLibraryMethodCleanUp_name=Standard method rather than Library method
StandardMethodRatherThanLibraryMethodCleanUp_description=Stop using ObjectUtils.equals(), ObjectUtils.hashCode(), ObjectUtils.hashCodeMulti() and ObjectUtils.toString() to use java.util.Objects methods instead.
StandardMethodRatherThanLibraryMethodCleanUp_reason=Those specific Apache and Google methods are deprecated. It also reduces the dependency to libraries.
StringRatherThanNewStringCleanUp_name=String rather than new string
StringRatherThanNewStringCleanUp_description=Removes a String instance from a String literal.
StringRatherThanNewStringCleanUp_reason=It improves the time and space performance. It also improves the readability.
StringCleanUp_name=String
StringCleanUp_description=Removes:\n- calling String.toString() on a String instance,\n- remove calls to String.toString() inside String concatenations,\n- replace useless case shifts for equality by equalsIgnoreCase()\nRefactors:\n- usages of 'indexOf' and 'lastIndexOf' with single letter in string
StringCleanUp_reason=It improves the time and space performance. It also improves the readability.
StringValueOfRatherThanConcatCleanUp_name=String.valueOf() rather than concatenation
StringValueOfRatherThanConcatCleanUp_description=Replace forced string transformation by String.valueOf().
StringValueOfRatherThanConcatCleanUp_reason=It improves the time and space performance.
BigNumberCleanUp_name=Big number
BigNumberCleanUp_description=Refactors to a proper use of BigDecimals and BigIntegers:\n- create BigDecimals or BigIntegers from Strings rather than floating point values,\n- create BigDecimals or BigIntegers from integers rather than String representing integers,\n- use BigDecimal or BigInteger constants,\n- replace calls to equals() with calls to compareTo().
BigNumberCleanUp_reason=It improves the readability.
OppositeComparisonRatherThanNegativeExpressionCleanUp_name=Opposite comparison rather than negative expression
OppositeComparisonRatherThanNegativeExpressionCleanUp_description=Reverse a comparison expression to avoid a minus prefix.
OppositeComparisonRatherThanNegativeExpressionCleanUp_reason=It improves the readability and the performance. It also fixes a SONAR alert (squid:S2676).
RemoveEmptyIfCleanUp_name=Remove empty if
RemoveEmptyIfCleanUp_description=Removes empty if or else block.
RemoveEmptyIfCleanUp_reason=It reduces code to focus attention on what matters. It also improves the time performance.
NoLoopIterationRatherThanEmptyCheckCleanUp_name=No loop iteration rather than empty check
NoLoopIterationRatherThanEmptyCheckCleanUp_description=Removes useless empty check before a for loop.
NoLoopIterationRatherThanEmptyCheckCleanUp_reason=It reduces code to focus attention on what matters. It also improves the time performance.
InlineCodeRatherThanPeremptoryConditionCleanUp_name=Inline code rather than peremptory condition
InlineCodeRatherThanPeremptoryConditionCleanUp_description=Replace always true or always false condition by inline code.
InlineCodeRatherThanPeremptoryConditionCleanUp_reason=It disambiguates the code to improve the readability.
RemoveUselessBlockCleanUp_name=Remove useless block
RemoveUselessBlockCleanUp_description=Removes lone and embedded block.
RemoveUselessBlockCleanUp_reason=It reduces code to focus attention on what matters.
RemoveEmptyStatementCleanUp_name=Removes empty statements
RemoveEmptyStatementCleanUp_description=Removes structural statements with no substatement.
RemoveEmptyStatementCleanUp_reason=It reduces code to focus attention on what matters.
SingleDeclarationsRatherThanMultiDeclarationCleanUp_name=Single declarations rather than multi declaration
SingleDeclarationsRatherThanMultiDeclarationCleanUp_description=Write only one variable declaration per line.
SingleDeclarationsRatherThanMultiDeclarationCleanUp_reason=It makes the code more standard. It fixes the Sonar RSPEC-1659.
EndOfMethodRatherThanReturnCleanUp_name=End of method rather than return
EndOfMethodRatherThanReturnCleanUp_description=Removes useless lone return at the end of a method.
EndOfMethodRatherThanReturnCleanUp_reason=It reduces code to focus attention on what matters.
EndOfLoopRatherThanContinueCleanUp_name=End of loop rather than continue
EndOfLoopRatherThanContinueCleanUp_description=Removes useless lone continue at the end of a loop.
EndOfLoopRatherThanContinueCleanUp_reason=It reduces code to focus attention on what matters.
WhileConditionRatherThanInnerIfCleanUp_name=While condition rather than inner if
WhileConditionRatherThanInnerIfCleanUp_description=Move a condition of an inner if that breaks a while loop into the while condition.
WhileConditionRatherThanInnerIfCleanUp_reason=It improves the readability.
DoWhileRatherThanWhileCleanUp_name=Do/while rather than while
DoWhileRatherThanWhileCleanUp_description=Replace while by do/while when the first evaluation is always true.
DoWhileRatherThanWhileCleanUp_reason=It improves the time performance.
DoWhileRatherThanDuplicateCodeCleanUp_name=Do/while rather than duplicate code
DoWhileRatherThanDuplicateCodeCleanUp_description=Replace while by do/while when the loop statements are duplicated before the loop.
DoWhileRatherThanDuplicateCodeCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
IfRatherThanWhileAndFallsThroughCleanUp_name=If rather than while and falls through
IfRatherThanWhileAndFallsThroughCleanUp_description=Replace a while loop that always terminates during the first iteration by an if.
IfRatherThanWhileAndFallsThroughCleanUp_reason=It disambiguates the code to improve the readability.
SuperCallRatherThanUselessOverridingCleanUp_name=Super call rather than useless overriding
SuperCallRatherThanUselessOverridingCleanUp_description=Removes overriding of method if the overriding only call the super class.
SuperCallRatherThanUselessOverridingCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code.
AndConditionRatherThanEmbededIfCleanUp_name=Collapse if statements
AndConditionRatherThanEmbededIfCleanUp_description=Merge inside if statement into the parent if statement.
AndConditionRatherThanEmbededIfCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
CommonCodeInIfElseStatementCleanUp_name=Extract common code in if else statement
CommonCodeInIfElseStatementCleanUp_description=Factorizes common code in all if / else if / else statements at the end of each blocks.\nUltimately it removes the empty and passive if conditions.
CommonCodeInIfElseStatementCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
OppositeConditionRatherThanDuplicateConditionCleanUp_name=Opposite condition rather than duplicate condition
OppositeConditionRatherThanDuplicateConditionCleanUp_description=Do not repeat the same condition in several if.
OppositeConditionRatherThanDuplicateConditionCleanUp_reason=It reduces the reading, debugging and testing cost.
OneConditionRatherThanUnreachableBlockCleanUp_name=One condition rather than unreachable block
OneConditionRatherThanUnreachableBlockCleanUp_description=Detect two successive if conditions that are identical and remove the second one.
OneConditionRatherThanUnreachableBlockCleanUp_reason=It removes dead code.
MergeConditionalBlocksCleanUp_name=Merge conditional statements
MergeConditionalBlocksCleanUp_description=Merge adjacent if / else if / else statements with same code block.
MergeConditionalBlocksCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_name=One if rather than duplicate blocks that fall through
OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_description=Merge consecutive if statements with same code block that end with a jump statement.
OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
OutsideCodeRatherThanFallingThroughBlocksCleanUp_name=Outside code rather than falling through blocks
OutsideCodeRatherThanFallingThroughBlocksCleanUp_description=Merge blocks that end with a jump statement into the following same code.
OutsideCodeRatherThanFallingThroughBlocksCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
ElseRatherThanOppositeConditionCleanUp_name=Else rather than opposite condition
ElseRatherThanOppositeConditionCleanUp_description=Remove a condition on an else that is opposite to the condition of the previous if. Beware! It may change the behavior if the code is transpiled in JavaScript for NaN values.
ElseRatherThanOppositeConditionCleanUp_reason=It improves readability.
GenericMapRatherThanRawMapCleanUp_name=Generic map rather than raw map
GenericMapRatherThanRawMapCleanUp_description=Genericize a map if possible.
GenericMapRatherThanRawMapCleanUp_reason=It reduces the bug hazard.
GenericListRatherThanRawListCleanUp_name=Generic list rather than raw list
GenericListRatherThanRawListCleanUp_description=Genericize a list if possible.
GenericListRatherThanRawListCleanUp_reason=It reduces the bug hazard.
UseDiamondOperatorCleanUp_name=Diamond operator
UseDiamondOperatorCleanUp_description=Refactors class instance creations to use the diamond operator wherever possible.
UseDiamondOperatorCleanUp_reason=It reduces the code to focus the attention on code that matters. It also upgrades legacy code.
NIORatherThanIOCleanUp_name=NIO rather than IO
NIORatherThanIOCleanUp_description=Use java.nio.* classes instead of java.io.* classes.
NIORatherThanIOCleanUp_reason=It upgrades legacy code.
UseMultiCatchCleanUp_name=Multi-catch
UseMultiCatchCleanUp_description=Refactors catch clauses with the same body to use Java 7's multi-catch.
UseMultiCatchCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also upgrades legacy code.
ContainsRatherThanLoopCleanUp_name=Collection.contains() rather than loop
ContainsRatherThanLoopCleanUp_description=Replace for loop with Collection.contains(Object obj).
ContainsRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters.
ContainsAllRatherThanLoopCleanUp_name=Collection.containsAll() rather than loop
ContainsAllRatherThanLoopCleanUp_description=Replace for loop with Collection.containsAll(Collection obj).
ContainsAllRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters.
DisjointRatherThanLoopCleanUp_name=Collections.disjoint() rather than loop
DisjointRatherThanLoopCleanUp_description=Replace for loop with Collections.disjoint(Collection obj1, Collection obj2).
DisjointRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters.
CollectionCleanUp_name=Inited collection rather than new collection and Collection.addAll()
CollectionCleanUp_description=Replaces creating a new Collection, then invoking Collection.addAll() on it, by creating the new Collection with the other Collection as parameter.
CollectionCleanUp_reason=It reduces the reading and debugging cost.
AddAllRatherThanLoopCleanUp_name=Collections.addAll() rather than loop
AddAllRatherThanLoopCleanUp_description=Collection related refactorings:\n- replaces for/foreach loops to use Collections.addAll() where possible,\n- replaces for/foreach loops to use Collection.addAll() where possible,\n- replaces for/foreach loops to use Collection.removeAll() where possible.
AddAllRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters.
FillRatherThanLoopCleanUp_name=Arrays.fill() rather than loop
FillRatherThanLoopCleanUp_description=Replaces for loops to use Arrays.fill() where possible.
FillRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters.
JoinRatherThanLoopCleanUp_name=String.join() rather than loop
JoinRatherThanLoopCleanUp_description=Replaces for loops to use String.join() where possible.
JoinRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters.
ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_name=Objects equals rather than equals and null check
ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_description=Simplify the equality between two objects.
ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_reason=It improves readability. It is particularly useful for Eclipse-generated equals() method.
BreakRatherThanPassiveIterationsCleanUp_name=Break rather than passive loops
BreakRatherThanPassiveIterationsCleanUp_description=Add a break to avoid passive for loop iterations.
BreakRatherThanPassiveIterationsCleanUp_reason=It improves the time performance.
UpdateSetRatherThanTestingFirstCleanUp_name=Update set rather than testing first
UpdateSetRatherThanTestingFirstCleanUp_description=Set related refactorings:\n- replaces calls to Set.contains() immediately followed by Set.add() with straight calls to Set.add(),\n- replaces calls to Set.contains() immediately followed by Set.remove() with straight calls to Set.remove(). Beware! It may change the behavior if you use custom Set implementation!
UpdateSetRatherThanTestingFirstCleanUp_reason=It reduces the coding, reading and debugging time.
IsEmptyRatherThanSizeCleanUp_name=Empty test rather than size
IsEmptyRatherThanSizeCleanUp_description=Replaces some checks on Collection.size() or Map.size() with checks on isEmpty().
IsEmptyRatherThanSizeCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code.
ReduceIndentationCleanUp_name=Reduce indentation
ReduceIndentationCleanUp_description=Remove useless indentation when the opposite workflow falls through.
ReduceIndentationCleanUp_reason=It improves the readability.
VariableInsideIfRatherThanAboveCleanUp_name=Variable inside if rather than above
VariableInsideIfRatherThanAboveCleanUp_description=Move a variable assignment that is only used in an if inside the if clause.
VariableInsideIfRatherThanAboveCleanUp_reason=It improves the time and space performance and the readability.
MapCleanUp_name=Inited map rather than new map and Map.putAll()
MapCleanUp_description=Replaces creating a new Map, then invoking Map.putAll() on it, by creating the new Map with the other Map as parameter.
MapCleanUp_reason=It reduces the reading and debugging cost.
EntrySetRatherThanKeySetAndValueSearchCleanUp_name=Map.entrySet() rather than Map.keySet() and value search
EntrySetRatherThanKeySetAndValueSearchCleanUp_description=Convert for loops iterating on Map.keySet() to iterate on Map.entrySet() when possible. Beware! It may change the behavior if you use custom Map implementation!
EntrySetRatherThanKeySetAndValueSearchCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also improves the time and the space performance.
MethodOnMapRatherThanMethodOnKeySetCleanUp_name=Method on map rather than method on keyset
MethodOnMapRatherThanMethodOnKeySetCleanUp_description=Directly invoke methods on Map rather than on Map.keySet() when possible.
MethodOnMapRatherThanMethodOnKeySetCleanUp_reason=It reduces the coding, reading and debugging cost. It also improves the time and the space performance.
NoAssignmentInIfConditionCleanUp_name=No assignment in if condition
NoAssignmentInIfConditionCleanUp_description=Moves assignments inside an if condition before the if node.
NoAssignmentInIfConditionCleanUp_reason=It improves the readability and reduces the bug hazard.
IncrementStatementRatherThanIncrementExpressionCleanUp_name=Increment statement rather than increment expression
IncrementStatementRatherThanIncrementExpressionCleanUp_description=Moves increment or decrement outside an expression when possible.
IncrementStatementRatherThanIncrementExpressionCleanUp_reason=It improves the readability and reduces the bug hazard.
DeclarationOutsideLoopRatherThanInsideCleanUp_name=Declaration outside loop rather than inside
DeclarationOutsideLoopRatherThanInsideCleanUp_description=Move declarations of variable inside a loop outside of the loop.
DeclarationOutsideLoopRatherThanInsideCleanUp_reason=It avoids to recreate the same variable. So it improves the time and memory performance.
IfElseIfCleanUp_name=if-elseif
IfElseIfCleanUp_description=Refactors "else { if (...) {} }" to "else if (...) {}".
IfElseIfCleanUp_reason=It reduces code to focus attention on what matters.
CommonIfInIfElseCleanUp_name=Move common inner if statement from then/else clauses around outer if statement
CommonIfInIfElseCleanUp_description=Moves an inner if statement around the outer if condition, when the inner if condition is common to both if/else clauses of the outer if statement.
CommonIfInIfElseCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
StringBuilderCleanUp_name=StringBuilder
StringBuilderCleanUp_description=Refactors to a proper use of StringBuilders:\n- replace String concatenations using operator '+' as parameters of StringBuffer/StringBuilder.append(),\n- replace chained call to StringBuffer/StringBuilder constructor followed by calls to append() and call toString() with straight String concatenation using operator '+'.
StringBuilderCleanUp_reason=It improves the time and space performance. It also improves the readability. String concatenation is automatically converted as StringBuilder at compile time so it is useless. Literal concatenation is automatically converted as a single literal at compile time.
StringBuilderMethodRatherThanReassignationCleanUp_name=StringBuilder method call rather than reassignment
StringBuilderMethodRatherThanReassignationCleanUp_description=Removes the assignment to the same variable on a StringBuilder.append() call.
StringBuilderMethodRatherThanReassignationCleanUp_reason=It reduces the code to focus the attention on code that matters.
StringBuilderRatherThanStringBufferCleanUp_name=StringBuilder rather than StringBuffer
StringBuilderRatherThanStringBufferCleanUp_description=Replace StringBuffer by StringBuilder when possible.
StringBuilderRatherThanStringBufferCleanUp_reason=It improves the time performance.
StringBuilderRatherThanStringCleanUp_name=StringBuilder rather than String
StringBuilderRatherThanStringCleanUp_description=Replace String concatenation by StringBuilder when possible.
StringBuilderRatherThanStringCleanUp_reason=It improves the memory and time performance.
AtomicObjectRatherThanMonoIndexArrayCleanUp_name=Atomic object rather than mono index array
AtomicObjectRatherThanMonoIndexArrayCleanUp_description=Replace an array with one index by an atomic object.
AtomicObjectRatherThanMonoIndexArrayCleanUp_reason=To pass a value as a reference, you should use AtomicReference or another Atomic concurrent object. It's not the purpose of an array.
PatternRatherThanRegExStringCleanUp_name=Pattern Rather Than RegEx String
PatternRatherThanRegExStringCleanUp_description=Compile a regular expression before using it.
PatternRatherThanRegExStringCleanUp_reason=It improves the time performance. It also disambiguate the types between regex and text.
OptimizeRegExCleanUp_name=Optimize RegEx
OptimizeRegExCleanUp_description=Detect strings that are used as regular expression and rewrite it in a more efficient way.
OptimizeRegExCleanUp_reason=It improves the time and space performance and avoid ReDOS attacks. It only optimizes regular expression for witch we are sure it is only used as regular expression.
CollectionsAddAllRatherThanAsListCleanUp_name=Collections.addAll() rather than Arrays.asList()
CollectionsAddAllRatherThanAsListCleanUp_description=Directly add an array content into a collection using Collections.addAll() instead of converting the array into a list and then add the elements into another collection.
CollectionsAddAllRatherThanAsListCleanUp_reason=It improves the time and space performance and the readability.
HashMapRatherThanHashtableCleanUp_name=HashMap rather than Hashtable
HashMapRatherThanHashtableCleanUp_description=Replace Hashtable by HashMap when possible.
HashMapRatherThanHashtableCleanUp_reason=It improves the time performance.
ArrayListRatherThanVectorCleanUp_name=ArrayList rather than Vector
ArrayListRatherThanVectorCleanUp_description=Replace Vector by ArrayList when possible.
ArrayListRatherThanVectorCleanUp_reason=It improves the time performance.
ArrayDequeRatherThanStackCleanUp_name=ArrayDeque rather than Stack
ArrayDequeRatherThanStackCleanUp_description=Replace Stack by ArrayDeque when possible.
ArrayDequeRatherThanStackCleanUp_reason=It improves the time performance.
SetRatherThanMapCleanUp_name=Set rather than map
SetRatherThanMapCleanUp_description=Replace map by set when values are not read.
SetRatherThanMapCleanUp_reason=It simplify the code showing that the values are not used.
ArrayListRatherThanLinkedListCleanUp_name=ArrayList rather than LinkedList
ArrayListRatherThanLinkedListCleanUp_description=Replace LinkedList by ArrayList when no item is inserted or removed in the middle of the list.
ArrayListRatherThanLinkedListCleanUp_reason=It improves the time and space performance.
SetRatherThanListCleanUp_name=Set rather than List
SetRatherThanListCleanUp_description=Replace List by HashSet when only presence of items is used.
SetRatherThanListCleanUp_reason=It improves the space performance.
HashMapRatherThanTreeMapCleanUp_name=HashMap rather than TreeMap
HashMapRatherThanTreeMapCleanUp_description=Replace TreeMap by HashMap when the entry order is not used.
HashMapRatherThanTreeMapCleanUp_reason=It improves the time and the space performance.
HashSetRatherThanTreeSetCleanUp_name=HashSet rather than TreeSet
HashSetRatherThanTreeSetCleanUp_description=Replace TreeSet by HashSet when the entry order is not used.
HashSetRatherThanTreeSetCleanUp_reason=It improves the time and the space performance.
UseStringContainsCleanUp_name=Use String.contains()
UseStringContainsCleanUp_description=Replaces uses of String.indexOf(String) String.lastIndexOf(String) by String.contains(CharSequence) where appropriate.
UseStringContainsCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code.
CommentsCleanUp_name=Comments
CommentsCleanUp_description=Refactors comments:\n- remove empty comments and javadocs,\n- transform comments applicable to java elements into javadocs,\n- transform javadocs that are not attached to any java elements into block comments,\n- remove IDE generated TODOs,\n- remove empty lines at start and end of javadocs and block comments,\n- uppercase first letter of javadocs,\n- collapse javadocs on a single line when allowed by Eclipse settings for formatting,\n- add final '.' to javadocs that do not have any,\n- remove Eclipse generated (non-Javadoc) block comments.
CommentsCleanUp_reason=It improves the readability.
RemoveFieldsDefaultValuesCleanUp_name=Remove fields default values
RemoveFieldsDefaultValuesCleanUp_description=Removes field initializers when they are the default value of the field's types.\nFor example, the initializer will be removed for integer fields initialized to "0".\nLikewise, the initializer will be removed for non primitive fields initialized to "null".
RemoveFieldsDefaultValuesCleanUp_reason=It reduces the code to focus the attention on the other non-default initializations.
StaticConstantRatherThanInstanceConstantCleanUp_name=Static constant rather than instance constant
StaticConstantRatherThanInstanceConstantCleanUp_description=Add the static modifier to the initialized final primitive or wrapper fields.
StaticConstantRatherThanInstanceConstantCleanUp_reason=It improves the space performance.
RemoveOverriddenAssignmentCleanUp_name=Remove overridden assignment
RemoveOverriddenAssignmentCleanUp_description=Remove passive assignment when the variable is reassigned before being read.
RemoveOverriddenAssignmentCleanUp_reason=It improves the readability. It also improves the time and the space performance.
Java7HashRatherThanEclipseJava6HashCleanUp_name=Java 7 hash rather than Eclipse Java 6 hash
Java7HashRatherThanEclipseJava6HashCleanUp_description=Rewrites Eclipse-autogenerated hashcode method by Eclipse-autogenerated hashcode method for Java 7.
Java7HashRatherThanEclipseJava6HashCleanUp_reason=It improves readability. It does not improve performance.
AnnotationCleanUp_name=Annotation
AnnotationCleanUp_description=Simplifies annotation uses:\n- empty parentheses will be removed from annotations,\n- single members named "value" will be removed from annotations and only the value will be left.
AnnotationCleanUp_reason=It improves the readability.
TryWithResourceCleanUp_name=Use try-with-resource
TryWithResourceCleanUp_description=Changes code to make use of Java 7 try-with-resources feature. In particular, it removes now useless finally clauses.
TryWithResourceCleanUp_reason=It improves the readability. It also upgrades legacy code.
TestNGAssertCleanUp_name=TestNG asserts
TestNGAssertCleanUp_description=Refactors to a proper use of TestNG assertions.
TestNGAssertCleanUp_reason=It improves the readability of the code and the report.
JupiterAssertCleanUp_name=Jupiter asserts
JupiterAssertCleanUp_description=Refactors to a proper use of JUnit 5 assertions.
JupiterAssertCleanUp_reason=It improves the readability of the code and the report.
JUnitAssertCleanUp_name=JUnit asserts
JUnitAssertCleanUp_description=Refactors to a proper use of JUnit assertions.
JUnitAssertCleanUp_reason=It improves the readability of the code and the report.
AssertJCleanUp_name=Assert J
AssertJCleanUp_description=Refactors to a proper use of Assert J assertions.
AssertJCleanUp_reason=It improves the readability of the code and the report.
SeparateAssertionsRatherThanBooleanExpressionCleanUp_name=Separate assertions rather than boolean expression
SeparateAssertionsRatherThanBooleanExpressionCleanUp_description=Refactors a true or a false assertion with respectively an AND or an OR operator into two separate assertions. It works for JUnit and TestNG.
SeparateAssertionsRatherThanBooleanExpressionCleanUp_reason=It adds information the report and save time to search the issues.
RemoveEmptyLinesCleanUp_name=Remove empty lines
RemoveEmptyLinesCleanUp_description=Removes unnecessary empty lines from source code:\n- empty lines after opening braces,\n- empty lines before closing braces,\n- two consecutive empty lines are converted to a single empty line.
RemoveEmptyLinesCleanUp_reason=It reduces code to focus attention on what matters.
RemoveEmptySuperConstrInvocationCleanUp_name=Remove super() call in constructor
RemoveEmptySuperConstrInvocationCleanUp_description=Remove call to super constructor with empty arguments since it is redundant. See JLS section 12.5 for more info.
RemoveEmptySuperConstrInvocationCleanUp_reason=It reduces code to focus attention on what matters.
ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_name=Implicit default constructor rather than written one
ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_description=Remove single public constructor with no arguments, no annotation and no code.
ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_reason=It improves the readability of a such case to spotlight the complexity of other code.
AndroidWakeLockCleanUp_name=Android WakeLock
AndroidWakeLockCleanUp_description=Android - Failing to release a wakelock properly can keep the Android device in a high power mode, which reduces battery life. There are several causes for this, such as releasing the wake lock in onDestroy() instead of in onPause(), failing to call release() in all possible code paths after an acquire(), and so on.
AndroidWakeLockCleanUp_reason=It improves the performance.
AndroidViewHolderCleanUp_name=Android ViewHolder
AndroidViewHolderCleanUp_description=Android - Optimize getView() routines for Android applications. It reduces the number calls to the costly inflate()) and getViewById() Android API methods.
AndroidViewHolderCleanUp_reason=It improves the performance.
LogParametersRatherThanLogMessageCleanUp_name=Log parameters rather than log message
LogParametersRatherThanLogMessageCleanUp_description=Replaces a string concatenation as parameter of a logger method by a string template followed by objects.
LogParametersRatherThanLogMessageCleanUp_reason=It improves the time performance. It also avoids some null pointers.
NamedMethodRatherThanLogLevelParameterCleanUp_name=Named method rather than log level parameter
NamedMethodRatherThanLogLevelParameterCleanUp_description=Replaces level parameter by the appropriate method for standard logging.
NamedMethodRatherThanLogLevelParameterCleanUp_reason=It improves readability. Level parameter should be used only for dynamic level.
EnumMapRatherThanHashMapCleanUp_name=EnumMap rather than HashMap for enum keys
EnumMapRatherThanHashMapCleanUp_description=Refactor implementation class HashMap -> EnumMap when key is an enum type. Beware! It changes the result of an instanceof expression!
EnumMapRatherThanHashMapCleanUp_reason=It improves the space performance.
EnumSetRatherThanHashSetCleanUp_name=EnumSet rather than HashSet for enum types
EnumSetRatherThanHashSetCleanUp_description=Converts creation of HashSet with enum as a type to invocation of static methods of EnumSet where possible. Beware! It changes the result of an instanceof expression!
EnumSetRatherThanHashSetCleanUp_reason=It improves the space performance.
RemoveUncheckedThrowsClausesCleanUp_name=Remove unchecked exceptions from throws clause
RemoveUncheckedThrowsClausesCleanUp_description=Remove unchecked exceptions from throws clause. Beware, the JavaDoc is not updated!
RemoveUncheckedThrowsClausesCleanUp_reason=It reduces code to focus attention on what matters.
UppercaseNumberSuffixRatherThanLowercaseCleanUp_name=Capitalize lower case 'l' -> 'L' for long 'f' -> 'F' for float number literals
UppercaseNumberSuffixRatherThanLowercaseCleanUp_description=Capitalize lower case 'l' -> 'L' for long 'f' -> 'F' for float number literals.
UppercaseNumberSuffixRatherThanLowercaseCleanUp_reason=It disambiguates the code to reduce bug hazard.
FormattedNumberRatherThanPackedNumberCleanUp_name=Formatted number rather than packed number
FormattedNumberRatherThanPackedNumberCleanUp_description=Add underscore for each thousand in number literals when it is obvious it is useful. Unfortunately, only few cases are obvious.
FormattedNumberRatherThanPackedNumberCleanUp_reason=It improves readability.
SwitchCleanUp_name=Switch
SwitchCleanUp_description=Switch related refactorings:\n- replaces if/else if/else blocks to use switch where possible.
SwitchCleanUp_reason=It reduces the coding, reading and debugging cost.
IfRatherThanTwoSwitchCasesCleanUp_name=If rather than two switch cases
IfRatherThanTwoSwitchCasesCleanUp_description=Replace a switch structure by an if block when there are less than three distinct cases. Beware! It may fix some null pointers, so it may change the behavior.
IfRatherThanTwoSwitchCasesCleanUp_reason=It improves readability. It also fixes SONAR alerts.
RemoveSemiColonCleanUp_name=Remove semicolons
RemoveSemiColonCleanUp_description=Removes superfluous semicolon after body declarations in type declarations.
RemoveSemiColonCleanUp_reason=It reduces code to focus attention on what matters.
AddBracketsToControlStatementCleanUp_name=Add brackets to control statement
AddBracketsToControlStatementCleanUp_description=Adds brackets to:\n- if then/else clauses,\n- for loop body,\n- do ... while loop body,\n- while loop body.
AddBracketsToControlStatementCleanUp_reason=It improves the readability and reduce the bug hazard.
RemoveUnnecessaryLocalBeforeReturnCleanUp_name=Remove unnecessary local before return
RemoveUnnecessaryLocalBeforeReturnCleanUp_description=Removes unnecessary local variable declaration or unnecessary variable assignment before a return statement.
RemoveUnnecessaryLocalBeforeReturnCleanUp_reason=It reduces code to focus attention on what matters. It also improves time performance.
RedundantModifiersCleanUp_name=Remove useless modifiers
RedundantModifiersCleanUp_description=Sorts modifiers.\nAlso removes modifiers implied by the context:\n- "static" and "abstract" for interface,\n- "public", "static" and "final" for interface fields,\n- "public" and "abstract" for interface methods,\n- "final" for private methods,\n- "final" for parameters in interface method declarations,- "protected" modifier for final class not inherited members.
RedundantModifiersCleanUp_reason=It reduces code to focus attention on what matters.
StaticInnerClassThanNonStaticCleanUp_name=Static inner class than non-static
StaticInnerClassThanNonStaticCleanUp_description=Make inner class static if it doesn't use top level class members.
StaticInnerClassThanNonStaticCleanUp_reason=It improves the space performance and it helps the code analysis.
RemoveUnnecessaryCastCleanUp_name=Remove unnecessary casts
RemoveUnnecessaryCastCleanUp_description=Removes unnecessary widening casts from return statements, assignments and infix expressions. Correctly types literals.
RemoveUnnecessaryCastCleanUp_reason=It reduces code to focus attention on what matters. It also improves the time and the space performance.
PushNegationDownCleanUp_name=Push negation down
PushNegationDownCleanUp_description=Pushes negations down, inside the negated expressions.
PushNegationDownCleanUp_reason=It disambiguates the code to reduce bug hazard.
LocalVariableRatherThanFieldCleanUp_name=Local variable rather than field
LocalVariableRatherThanFieldCleanUp_description=Refactors a field into a local variable if its use is only local.
LocalVariableRatherThanFieldCleanUp_reason=It reduces code to focus attention on what matters. It also improves the time and the space performance.
SimpleNameRatherThanQualifiedNameCleanUp_name=Simple name rather than qualified name
SimpleNameRatherThanQualifiedNameCleanUp_description=Refactors types, method invocations and field accesses to replace qualified names by simple names when appropriate. For example when relevant imports exist.
SimpleNameRatherThanQualifiedNameCleanUp_reason=It reduces code to focus attention on what matters.
SimplifyExpressionCleanUp_name=Simplify expressions
SimplifyExpressionCleanUp_description=Simplifies Java expressions:\n- remove redundant null checks or useless right-hand side or left-hand side operands,\n- directly check boolean values instead of comparing them with true/false,\n- reduce double negation in boolean expression.
SimplifyExpressionCleanUp_reason=It improves the readability and the performance.
RemoveParenthesisCleanUp_name=Remove parenthesis
RemoveParenthesisCleanUp_description=Remove useless parentheses.
RemoveParenthesisCleanUp_reason=It improves the readability.
