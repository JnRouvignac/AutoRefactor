IntPrimitiveRatherThanWrapperCleanUp_name=Int primitive rather than wrapper
IntPrimitiveRatherThanWrapperCleanUp_description=Replace Integer wrapper object by int primitive type when an object is not necessary.
IntPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
ShortPrimitiveRatherThanWrapperCleanUp_name=Short primitive rather than wrapper
ShortPrimitiveRatherThanWrapperCleanUp_description=Replace Short wrapper object by short primitive type when an object is not necessary.
ShortPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
LongPrimitiveRatherThanWrapperCleanUp_name=Long primitive rather than wrapper
LongPrimitiveRatherThanWrapperCleanUp_description=Replace Long wrapper object by long primitive type when an object is not necessary.
LongPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
DoublePrimitiveRatherThanWrapperCleanUp_name=Double primitive rather than wrapper
DoublePrimitiveRatherThanWrapperCleanUp_description=Replace Double wrapper object by double primitive type when an object is not necessary.
DoublePrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
FloatPrimitiveRatherThanWrapperCleanUp_name=Float primitive rather than wrapper
FloatPrimitiveRatherThanWrapperCleanUp_description=Replace Float wrapper object by float primitive type when an object is not necessary.
FloatPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
CharPrimitiveRatherThanWrapperCleanUp_name=Char primitive rather than wrapper
CharPrimitiveRatherThanWrapperCleanUp_description=Replace Character wrapper object by char primitive type when an object is not necessary.
CharPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
BytePrimitiveRatherThanWrapperCleanUp_name=Byte primitive rather than wrapper
BytePrimitiveRatherThanWrapperCleanUp_description=Replace Byte wrapper object by byte primitive type when an object is not necessary.
BytePrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
ObsoleteAssignRatherThanFilterThenAssignAnywayCleanUp_name=Assign rather than filter then assign anyway
ObsoleteAssignRatherThanFilterThenAssignAnywayCleanUp_description=Removes useless bad value checks before assignments or return statements.\nSuch useless bad value checks are comparing an expression against bad value,\nthen either assigning bad value or the expression depending on the result of the bad value check.\nIt is simpler to directly assign the expression.
ObsoleteAssignRatherThanFilterThenAssignAnywayCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_name=Assign rather than ternary filter then assign anyway
AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_description=Removes useless bad value checks before assignments or return statements.\nSuch useless bad value checks are comparing an expression against bad value,\nthen either assigning bad value or the expression depending on the result of the bad value check.\nIt is simpler to directly assign the expression.
AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
VectorOldToNewAPICleanUp_name=Collections APIs rather than Vector pre-Collections APIs
VectorOldToNewAPICleanUp_description=Replaces Vector pre-Collections APIs with equivalent Collections APIs.
VectorOldToNewAPICleanUp_reason=It makes the code more standard.
ObsoleteParsingRatherThanValueOfCleanUp_name=Parsing rather than valueOf()
ObsoleteParsingRatherThanValueOfCleanUp_description=Avoid to create primitive wrapper when parsing a string.
ObsoleteParsingRatherThanValueOfCleanUp_reason=It dramatically improves the space performance.
ObsoleteValueOfRatherThanInstantiationCleanUp_name=valueOf() rather than instantiation
ObsoleteValueOfRatherThanInstantiationCleanUp_description=Replaces unnecessary primitive wrappers instance creations by using static factory methods ("valueOf()").
ObsoleteValueOfRatherThanInstantiationCleanUp_reason=It dramatically improves the space performance.
ObsoleteAutoBoxingRatherThanExplicitMethodCleanUp_name=AutoBoxing rather than explicit method
ObsoleteAutoBoxingRatherThanExplicitMethodCleanUp_description=Remove useless valueOf() call to use AutoBoxing.
ObsoleteAutoBoxingRatherThanExplicitMethodCleanUp_reason=AutoBoxing methods are automatically added by the compiler so it is useless. It improves the readability. It upgrades legacy code. It also reduces the size of the source code.
ObsoleteUnboxingRatherThanExplicitMethodCleanUp_name=Unboxing rather than explicit method
ObsoleteUnboxingRatherThanExplicitMethodCleanUp_description=Remove useless primitiveValue() call to use unboxing.
ObsoleteUnboxingRatherThanExplicitMethodCleanUp_reason=UnBoxing methods are automatically added by the compiler so it is useless. It improves the readability. It upgrades legacy code. It also reduces the size of the source code.
ObsoleteBracketsRatherThanArrayInstantiationCleanUp_name=Brackets rather than array instantiation
ObsoleteBracketsRatherThanArrayInstantiationCleanUp_description=Replace the new instance syntax by curly brackets to create an array when possible.
ObsoleteBracketsRatherThanArrayInstantiationCleanUp_reason=It reduces code to focus attention on what matters.
ObsoleteLambdaExpressionRatherThanComparatorCleanUp_name=Lambda expression rather than comparator
ObsoleteLambdaExpressionRatherThanComparatorCleanUp_description=Replace a plain comparator instance by a lambda expression passed to a Comparator.comparing() method.\n\
	Status: deprecated, use eclipse cleanup instead
ObsoleteLambdaExpressionRatherThanComparatorCleanUp_reason=It improves the readability. It also reduces the size of the source code and the binaries.
ObsoleteLambdaCleanUp_name=Improve lambda expressions
ObsoleteLambdaCleanUp_description=Improve lambda expressions.
ObsoleteLambdaCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.\n\
	Status: deprecated, use eclipse cleanup instead
ObsoleteLiteralRatherThanBooleanConstantCleanUp_name=Literal rather than boolean constant
ObsoleteLiteralRatherThanBooleanConstantCleanUp_description=Replace Boolean.TRUE/Boolean.FALSE by true/false on primitive assignment.
ObsoleteLiteralRatherThanBooleanConstantCleanUp_reason=It improves the readability.
BooleanCleanUp_name=Boolean
BooleanCleanUp_description=Boolean related refactorings:\n- remove if statements when then and else clauses do similar things with opposite boolean values,\n- remove ternary operators when then and else clauses do similar things with opposite boolean values,\n- simplify boolean expressions.
BooleanCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
BooleanPrimitiveRatherThanWrapperCleanUp_name=Boolean primitive rather than wrapper
BooleanPrimitiveRatherThanWrapperCleanUp_description=Replace Boolean wrapper object by boolean primitive type when an object is not necessary.
BooleanPrimitiveRatherThanWrapperCleanUp_reason=It improves the readability and reduces null pointer check. It also improves the space performance.
ObsoleteLazyLogicalRatherThanEagerCleanUp_name=Lazy logical rather than eager
ObsoleteLazyLogicalRatherThanEagerCleanUp_description=Replace && by &&&& and | by || when the right operand is passive.
ObsoleteLazyLogicalRatherThanEagerCleanUp_reason=It improves the time performance.
BooleanConstantRatherThanValueOfCleanUp_name=Boolean constant rather than valueOf()
BooleanConstantRatherThanValueOfCleanUp_description=Replace Boolean.valueOf(true) and Boolean.valueOf(false) by Boolean.TRUE and Boolean.FALSE.
BooleanConstantRatherThanValueOfCleanUp_reason=It improves the readability. It also improves the time performance.
BooleanEqualsRatherThanNullCheckCleanUp_name=Boolean equals() rather than null check
BooleanEqualsRatherThanNullCheckCleanUp_description=Replace a null check of a Boolean followed by its value by an equality with a boolean constant.
BooleanEqualsRatherThanNullCheckCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
ObsoleteXORRatherThanDuplicateConditionsCleanUp_name=XOR rather than duplicate conditions
ObsoleteXORRatherThanDuplicateConditionsCleanUp_description=Replace (X &&&& !Y) || (!X &&&& Y) by X ^ Y.
ObsoleteXORRatherThanDuplicateConditionsCleanUp_reason=It improves the readability. It also reduces the size of the source code and the binaries.
ObsoleteOperandFactorizationCleanUp_name=Operand factorization
ObsoleteOperandFactorizationCleanUp_description=Replace (X &&&& Y) || (X &&&& Z) by (X &&&& (Y || Y)).
ObsoleteOperandFactorizationCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ORConditionRatherThanRedundantClausesCleanUp_name=OR condition rather than redundant clauses
ORConditionRatherThanRedundantClausesCleanUp_description=Replace (X &&&& Y) || !X by Y || !X.
ORConditionRatherThanRedundantClausesCleanUp_reason=It improves the readability. It also reduces the size of the source code and the binaries.
ObsoleteTernaryOperatorRatherThanDuplicateConditionsCleanUp_name=Ternary operator rather than duplicate conditions
ObsoleteTernaryOperatorRatherThanDuplicateConditionsCleanUp_description=Replace (X &&&& Y) || (!X &&&& Z) by X ? Y : Z.
ObsoleteTernaryOperatorRatherThanDuplicateConditionsCleanUp_reason=It improves the readability. It also reduces the size of the source code and the binaries.
ObsoleteInvertEqualsCleanUp_name=Equals on constant rather than on variable
ObsoleteInvertEqualsCleanUp_description=Inverts calls to Object.equals(Object) and String.equalsIgnoreCase(String) when it is known that the second operand is not null and the first can be null. Beware! By avoiding null pointer, the behavior may change!
ObsoleteInvertEqualsCleanUp_reason=It avoids null pointer.
ObsoleteComparisonCleanUp_name=Comparison to 0 rather than 1 or -1
ObsoleteComparisonCleanUp_description=Fix Comparable.compareTo() usage. Beware! The behavior may change if you implement a custom comparator!
ObsoleteComparisonCleanUp_reason=It standardizes the code.
ObsoleteRedundantComparatorCleanUp_name=Redundant comparator
ObsoleteRedundantComparatorCleanUp_description=Remove the comparator declaration if it is the default one
ObsoleteRedundantComparatorCleanUp_reason=The natural order is the default comparator. Declaring it gives no information. Even worse, it goes you wrong as you would think the order is specific. It also reduces the size of the source code and the binaries.
ObsoleteDoubleCompareRatherThanEqualityCleanUp_name=Double compare rather than equality
ObsoleteDoubleCompareRatherThanEqualityCleanUp_description=Replace arithmetic comparison by Double.compare(). Beware! The behavior may change if your code run with a bug!
ObsoleteDoubleCompareRatherThanEqualityCleanUp_reason=It avoids computation errors.
RemoveUnneededThisExpressionCleanUp_name=Remove unneeded this expressions
RemoveUnneededThisExpressionCleanUp_description=Remove useless use of "this" from method calls.
RemoveUnneededThisExpressionCleanUp_reason=It reduces code to focus attention on what matters.
AggregateConstructorRatherThanGWTMethodCleanUp_name=Aggregate constructor rather than GWT method
AggregateConstructorRatherThanGWTMethodCleanUp_description=Use new ArrayList<>() and new HashMap<>() instead of using specific GWT Lists.newArrayList() and Maps.newHashMap().
AggregateConstructorRatherThanGWTMethodCleanUp_reason=With diamond operator in Java 7, those specific GWT methods are useless. It also reduces the dependency to libraries.
StandardMethodRatherThanLibraryMethodCleanUp_name=Standard method rather than Library method
StandardMethodRatherThanLibraryMethodCleanUp_description=Stop using ObjectUtils.equals(), ObjectUtils.hashCode(), ObjectUtils.hashCodeMulti() and ObjectUtils.toString() to use java.util.Objects methods instead.
StandardMethodRatherThanLibraryMethodCleanUp_reason=Those specific Apache and Google methods are deprecated. It also reduces the dependency to libraries.
ObsoleteInstanceofRatherThanIsInstanceCleanUp_name=instanceof rather than isInstance()
ObsoleteInstanceofRatherThanIsInstanceCleanUp_description=Use an instanceof expression to check an object against a hardcoded class.
ObsoleteInstanceofRatherThanIsInstanceCleanUp_reason=isInstance() should be used only on dynamic object. It improves the readability.
ObsoleteStringRatherThanNewStringCleanUp_name=String rather than new string
ObsoleteStringRatherThanNewStringCleanUp_description=Removes a String instance from a String literal.
ObsoleteStringRatherThanNewStringCleanUp_reason=It improves the time and space performance. It improves the readability. It also reduces the size of the source code and the binaries.
StringCleanUp_name=String
StringCleanUp_description=Removes:\n- calling String.toString() on a String instance,\n- remove calls to String.toString() inside String concatenations.
StringCleanUp_reason=It improves the time and space performance. It also improves the readability.
EqualsIgnoreCaseRatherThanCaseShiftCleanUp_name=equalsIgnoreCase() rather than case shift
EqualsIgnoreCaseRatherThanCaseShiftCleanUp_description=Replace useless case shifts for equality by equalsIgnoreCase()
EqualsIgnoreCaseRatherThanCaseShiftCleanUp_reason=It improves the time and space performance. It also improves the readability.
CharacterParameterRatherThanStringCleanUp_name=Character parameter rather than string
CharacterParameterRatherThanStringCleanUp_description=Replace String.indexOf(String), String.indexOf(String, int), String.lastIndexOf(String) and String.lastIndexOf(String, int) by String.indexOf(int), String.indexOf(int, int), String.lastIndexOf(int) and String.lastIndexOf(int, int) when a string is one-character long.
CharacterParameterRatherThanStringCleanUp_reason=It improves the time and space performance.
StringValueOfRatherThanConcatCleanUp_name=String.valueOf() rather than concatenation
StringValueOfRatherThanConcatCleanUp_description=Replace forced string transformation by String.valueOf().
StringValueOfRatherThanConcatCleanUp_reason=It improves the time and space performance.
ObsoleteSubstringWithOneParameterRatherThanTwoCleanUp_name=substring() with one parameter rather than two
ObsoleteSubstringWithOneParameterRatherThanTwoCleanUp_description=Remove the second substring() parameter if this parameter is the length of the string.
ObsoleteSubstringWithOneParameterRatherThanTwoCleanUp_reason=The result is the same without the second parameter. It improves the readability. It also reduces the size of the source code and the binaries.
BigNumberCleanUp_name=Big number
BigNumberCleanUp_description=Refactors to a proper use of BigDecimals and BigIntegers:\n- create BigDecimals or BigIntegers from Strings rather than floating point values,\n- create BigDecimals or BigIntegers from integers rather than String representing integers,\n- use BigDecimal or BigInteger constants.
BigNumberCleanUp_reason=It improves the readability.
ObsoleteComparisonRatherThanEqualsCleanUp_name=Comparison rather than equals
ObsoleteComparisonRatherThanEqualsCleanUp_description=Replace calls to equals() with calls to compareTo().
ObsoleteComparisonRatherThanEqualsCleanUp_reason=An equality compares the information, not the numerical value. For instance, two numbers with different precision are different, even if they have the same numerical value.
OppositeComparisonRatherThanNegativeExpressionCleanUp_name=Opposite comparison rather than negative expression
OppositeComparisonRatherThanNegativeExpressionCleanUp_description=Reverse a comparison expression to avoid a minus prefix.
OppositeComparisonRatherThanNegativeExpressionCleanUp_reason=It improves the readability and the performance. It fixes a SONAR alert (squid:S2676). It also reduces the size of the source code and the binaries.
ObsoletePrimitiveComparisonRatherThanWrapperComparisonCleanUp_name=Primitive comparison rather than wrapper comparison
ObsoletePrimitiveComparisonRatherThanWrapperComparisonCleanUp_description=Replace the compareTo() method by a comparison on primitive.
ObsoletePrimitiveComparisonRatherThanWrapperComparisonCleanUp_reason=It avoids autoboxing and improves the performance.
ObsoleteSerializeRatherThanBoxingAndSerializeCleanUp_name=Serialize rather than boxing and serialize
ObsoleteSerializeRatherThanBoxingAndSerializeCleanUp_description=Replace a primitive boxing to serialize by a call to the static toString() method.
ObsoleteSerializeRatherThanBoxingAndSerializeCleanUp_reason=It improves the time and space performance. It improves the readability. It also reduces the size of the source code and the binaries.
RemoveEmptyIfCleanUp_name=Remove empty if
RemoveEmptyIfCleanUp_description=Removes empty if or else block.
RemoveEmptyIfCleanUp_reason=It reduces code to focus attention on what matters. It improves the time performance. It also reduces the size of the source code and the binaries.
NoLoopIterationRatherThanEmptyCheckCleanUp_name=No loop iteration rather than empty check
NoLoopIterationRatherThanEmptyCheckCleanUp_description=Removes useless empty check before a for loop.
NoLoopIterationRatherThanEmptyCheckCleanUp_reason=It reduces code to focus attention on what matters. It improves the time performance. It also reduces the size of the source code and the binaries.
InlineCodeRatherThanPeremptoryConditionCleanUp_name=Inline code rather than peremptory condition
InlineCodeRatherThanPeremptoryConditionCleanUp_description=Replace always true or always false condition by inline code.
InlineCodeRatherThanPeremptoryConditionCleanUp_reason=It disambiguates the code to improve the readability. It also reduces the size of the source code and the binaries.
RemoveUselessBlockCleanUp_name=Remove useless block
RemoveUselessBlockCleanUp_description=Removes lone and embedded block.
RemoveUselessBlockCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
RemoveEmptyStatementCleanUp_name=Removes empty statements
RemoveEmptyStatementCleanUp_description=Removes structural statements with no substatement.
RemoveEmptyStatementCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
SingleDeclarationsRatherThanMultiDeclarationCleanUp_name=Single declarations rather than multi declaration
SingleDeclarationsRatherThanMultiDeclarationCleanUp_description=Write only one variable declaration per line.
SingleDeclarationsRatherThanMultiDeclarationCleanUp_reason=It makes the code more standard. It fixes the Sonar RSPEC-1659.
ObsoleteEndOfMethodRatherThanReturnCleanUp_name=End of method rather than return
ObsoleteEndOfMethodRatherThanReturnCleanUp_description=Removes useless lone return at the end of a method.
ObsoleteEndOfMethodRatherThanReturnCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ObsoleteEndOfLoopRatherThanContinueCleanUp_name=End of loop rather than continue
ObsoleteEndOfLoopRatherThanContinueCleanUp_description=Removes useless lone continue at the end of a loop.
ObsoleteEndOfLoopRatherThanContinueCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
WhileConditionRatherThanInnerIfCleanUp_name=While condition rather than inner if
WhileConditionRatherThanInnerIfCleanUp_description=Move a condition of an inner if that breaks a while loop into the while condition.
WhileConditionRatherThanInnerIfCleanUp_reason=It improves the readability. It also reduces the size of the source code and the binaries.
DoWhileRatherThanWhileCleanUp_name=Do/while rather than while
DoWhileRatherThanWhileCleanUp_description=Replace while by do/while when the first evaluation is always true.
DoWhileRatherThanWhileCleanUp_reason=It improves the time performance.
DoWhileRatherThanDuplicateCodeCleanUp_name=Do/while rather than duplicate code
DoWhileRatherThanDuplicateCodeCleanUp_description=Replace while by do/while when the loop statements are duplicated before the loop.
DoWhileRatherThanDuplicateCodeCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
ObsoleteIfRatherThanWhileAndFallsThroughCleanUp_name=If rather than while and falls through
ObsoleteIfRatherThanWhileAndFallsThroughCleanUp_description=Replace a while loop that always terminates during the first iteration by an if.\
	Status: deprecated since eclipse 4.19 (2021-03), use eclipse cleanup "Convert loop into if" instead
ObsoleteIfRatherThanWhileAndFallsThroughCleanUp_reason=It disambiguates the code to improve the readability.
SuperCallRatherThanUselessOverridingCleanUp_name=Super call rather than useless overriding
SuperCallRatherThanUselessOverridingCleanUp_description=Removes overriding of method if the overriding only call the super class.
SuperCallRatherThanUselessOverridingCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code. It also reduces the size of the source code and the binaries.
ObsoleteAndConditionRatherThanEmbededIfCleanUp_name=Collapse if statements
ObsoleteAndConditionRatherThanEmbededIfCleanUp_description=Merge inside if statement into the parent if statement.
ObsoleteAndConditionRatherThanEmbededIfCleanUp_reason=It reduces the coding, reading, debugging and testing cost.
ObsoleteDuplicateAlternativeCleanUp_name=Duplicate alternative
ObsoleteDuplicateAlternativeCleanUp_description=Merge inside if statement into the parent if statement when the alternative clauses are duplicate.
ObsoleteDuplicateAlternativeCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also reduces the size of the source code and the binaries.
ObsoleteCommonCodeInIfElseStatementCleanUp_name=Extract common code in if else statement
ObsoleteCommonCodeInIfElseStatementCleanUp_description=Factorizes common code in all if / else if / else statements at the end of each blocks.\nUltimately it removes the empty and passive if conditions.
ObsoleteCommonCodeInIfElseStatementCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also reduces the size of the source code and the binaries.
ObsoleteOppositeConditionRatherThanDuplicateConditionCleanUp_name=Opposite condition rather than duplicate condition
ObsoleteOppositeConditionRatherThanDuplicateConditionCleanUp_description=Do not repeat the same condition in several if.
ObsoleteOppositeConditionRatherThanDuplicateConditionCleanUp_reason=It reduces the reading, debugging and testing cost. It also reduces the size of the source code and the binaries.
ObsoleteOneConditionRatherThanUnreachableBlockCleanUp_name=One condition rather than unreachable block
ObsoleteOneConditionRatherThanUnreachableBlockCleanUp_description=Detect two successive if conditions that are identical and remove the second one.
ObsoleteOneConditionRatherThanUnreachableBlockCleanUp_reason=It removes dead code. It also reduces the size of the source code and the binaries.
ObsoleteMergeConditionalBlocksCleanUp_name=Merge conditional statements
ObsoleteMergeConditionalBlocksCleanUp_description=Merge adjacent if / else if / else statements with same code block.
ObsoleteMergeConditionalBlocksCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also reduces the size of the source code and the binaries.
OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_name=One if rather than duplicate blocks that fall through
OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_description=Merge consecutive if statements with same code block that end with a jump statement.
OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also reduces the size of the source code and the binaries.
ObsoleteOutsideCodeRatherThanFallingThroughBlocksCleanUp_name=Outside code rather than falling through blocks
ObsoleteOutsideCodeRatherThanFallingThroughBlocksCleanUp_description=Merge blocks that end with a jump statement into the following same code.
ObsoleteOutsideCodeRatherThanFallingThroughBlocksCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also reduces the size of the source code and the binaries.
ElseRatherThanNegatedConditionCleanUp_name=Else rather than opposite condition
ElseRatherThanNegatedConditionCleanUp_description=Remove a condition on an else that is opposite to the condition of the previous if. Beware! It may change the behavior if the code is transpiled in JavaScript for NaN values.
ElseRatherThanNegatedConditionCleanUp_reason=It improves readability. It also reduces the size of the source code and the binaries.
ObsoleteGenericMapRatherThanRawMapCleanUp_name=Generic map rather than raw map
ObsoleteGenericMapRatherThanRawMapCleanUp_description=Genericize a map if possible.
ObsoleteGenericMapRatherThanRawMapCleanUp_reason=It reduces the bug hazard.
ObsoleteGenericListRatherThanRawListCleanUp_name=Generic list rather than raw list
ObsoleteGenericListRatherThanRawListCleanUp_description=Genericize a list if possible.
ObsoleteGenericListRatherThanRawListCleanUp_reason=It reduces the bug hazard.
ObsoleteUseDiamondOperatorCleanUp_name=Diamond operator
ObsoleteUseDiamondOperatorCleanUp_description=Refactors class instance creations to use the diamond operator wherever possible.\n\
	Status: deprecated since eclipse 4.18 (2020-12), use corresponding eclipse cleanup instead
ObsoleteUseDiamondOperatorCleanUp_reason=It reduces the code to focus the attention on code that matters. It also upgrades legacy code.
NIORatherThanIOCleanUp_name=NIO rather than IO
NIORatherThanIOCleanUp_description=Use java.nio.* classes instead of java.io.* classes.
NIORatherThanIOCleanUp_reason=It upgrades legacy code.
ObsoleteUseMultiCatchCleanUp_name=Multi-catch
ObsoleteUseMultiCatchCleanUp_description=Refactors catch clauses with the same body to use Java 7's multi-catch.
ObsoleteUseMultiCatchCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It upgrades legacy code. It also reduces the size of the source code and the binaries.
ContainsRatherThanLoopCleanUp_name=Collection.contains() rather than loop
ContainsRatherThanLoopCleanUp_description=Replace for loop with Collection.contains(Object obj).
ContainsRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ContainsAllRatherThanLoopCleanUp_name=Collection.containsAll() rather than loop
ContainsAllRatherThanLoopCleanUp_description=Replace for loop with Collection.containsAll(Collection obj).
ContainsAllRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
DisjointRatherThanLoopCleanUp_name=Collections.disjoint() rather than loop
DisjointRatherThanLoopCleanUp_description=Replace for loop with Collections.disjoint(Collection obj1, Collection obj2).
DisjointRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ObsoleteCollectionCleanUp_name=Inited collection rather than new collection and Collection.addAll()
ObsoleteCollectionCleanUp_description=Replaces creating a new Collection, then invoking Collection.addAll() on it, by creating the new Collection with the other Collection as parameter.
ObsoleteCollectionCleanUp_reason=It reduces the reading and debugging cost. It also reduces the size of the source code and the binaries.
ObsoleteAddAllRatherThanLoopCleanUp_name=Collections.addAll() rather than loop
ObsoleteAddAllRatherThanLoopCleanUp_description=Collection related refactorings:\n\
	- replaces for/foreach loops to use Collections.addAll() where possible,\n\
	- replaces for/foreach loops to use Collection.addAll() where possible,\n
	- replaces for/foreach loops to use Collection.removeAll() where possible.\n
	Status: deprecated since eclipse 4.18 (2020-12), use eclipse cleanup instead
ObsoleteAddAllRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ObsoleteFillRatherThanLoopCleanUp_name=Arrays.fill() rather than loop
ObsoleteFillRatherThanLoopCleanUp_description=Replaces for loops to use Arrays.fill() where possible.\n\
	Status: deprecated since eclipse, use eclipse cleanup "Use Arrays.fill()" instead
ObsoleteFillRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ObsoleteJoinRatherThanLoopCleanUp_name=String.join() rather than loop
ObsoleteJoinRatherThanLoopCleanUp_description=Replaces for loops to use String.join() where possible.
ObsoleteJoinRatherThanLoopCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ObsoleteObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_name=Objects equals rather than equals and null check
ObsoleteObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_description=Simplify the equality between two objects.
ObsoleteObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_reason=It improves readability. It is particularly useful for Eclipse-generated equals() method. It upgrades legacy code. It also reduces the size of the source code and the binaries.
ObsoleteBreakRatherThanPassiveIterationsCleanUp_name=Break rather than passive loops
ObsoleteBreakRatherThanPassiveIterationsCleanUp_description=Add a break to avoid passive for loop iterations.
ObsoleteBreakRatherThanPassiveIterationsCleanUp_reason=It improves the time performance.
UpdateSetRatherThanTestingFirstCleanUp_name=Update set rather than testing first
UpdateSetRatherThanTestingFirstCleanUp_description=Set related refactorings:\n- replaces calls to Set.contains() immediately followed by Set.add() with straight calls to Set.add(),\n- replaces calls to Set.contains() immediately followed by Set.remove() with straight calls to Set.remove(). Beware! It may change the behavior if you use custom Set implementation!
UpdateSetRatherThanTestingFirstCleanUp_reason=It reduces the coding, reading and debugging time. It also reduces the size of the source code and the binaries.
IsEmptyRatherThanSizeCleanUp_name=Empty test rather than size
IsEmptyRatherThanSizeCleanUp_description=Replaces some checks on Collection.size() or Map.size() with checks on isEmpty().
IsEmptyRatherThanSizeCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code. It also reduces the size of the source code and the binaries.
ObsoleteReduceIndentationCleanUp_name=Reduce indentation
ObsoleteReduceIndentationCleanUp_description=Remove useless indentation when the opposite workflow falls through.
ObsoleteReduceIndentationCleanUp_reason=It improves the readability.
VariableInsideIfRatherThanAboveCleanUp_name=Variable inside if rather than above
VariableInsideIfRatherThanAboveCleanUp_description=Move a variable assignment that is only used in an if inside the if clause.
VariableInsideIfRatherThanAboveCleanUp_reason=It improves the time and space performance and the readability.
ObsoleteMapCleanUp_name=Inited map rather than new map and Map.putAll()
ObsoleteMapCleanUp_description=Replaces creating a new Map, then invoking Map.putAll() on it, by creating the new Map with the other Map as parameter.
ObsoleteMapCleanUp_reason=It reduces the reading and debugging cost. It also reduces the size of the source code and the binaries.
EntrySetRatherThanKeySetAndValueSearchCleanUp_name=Map.entrySet() rather than Map.keySet() and value search
EntrySetRatherThanKeySetAndValueSearchCleanUp_description=Convert for loops iterating on Map.keySet() to iterate on Map.entrySet() when possible. Beware! It may change the behavior if you use custom Map implementation!
EntrySetRatherThanKeySetAndValueSearchCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also improves the time and the space performance.
MethodOnMapRatherThanMethodOnKeySetCleanUp_name=Method on map rather than method on keyset
MethodOnMapRatherThanMethodOnKeySetCleanUp_description=Directly invoke methods on Map rather than on Map.keySet() when possible.
MethodOnMapRatherThanMethodOnKeySetCleanUp_reason=It reduces the coding, reading and debugging cost. It also improves the time and the space performance.
ObsoleteNoAssignmentInIfConditionCleanUp_name=No assignment in if condition
ObsoleteNoAssignmentInIfConditionCleanUp_description=Moves assignments inside an if condition before the if node.
ObsoleteNoAssignmentInIfConditionCleanUp_reason=It improves the readability and reduces the bug hazard.
ObsoleteIncrementStatementRatherThanIncrementExpressionCleanUp_name=Increment statement rather than increment expression
ObsoleteIncrementStatementRatherThanIncrementExpressionCleanUp_description=Moves increment or decrement outside an expression when possible.
ObsoleteIncrementStatementRatherThanIncrementExpressionCleanUp_reason=It improves the readability and reduces the bug hazard.
DeclarationOutsideLoopRatherThanInsideCleanUp_name=Declaration outside loop rather than inside
DeclarationOutsideLoopRatherThanInsideCleanUp_description=Move declarations of variable inside a loop outside of the loop.
DeclarationOutsideLoopRatherThanInsideCleanUp_reason=It avoids to recreate the same variable. So it improves the time and memory performance.
ObsoleteIfElseIfCleanUp_name=if-elseif
ObsoleteIfElseIfCleanUp_description=Refactors "else { if (...) {} }" to "else if (...) {}".
ObsoleteIfElseIfCleanUp_reason=It reduces code to focus attention on what matters.
CommonIfInIfElseCleanUp_name=Move common inner if statement from then/else clauses around outer if statement
CommonIfInIfElseCleanUp_description=Moves an inner if statement around the outer if condition, when the inner if condition is common to both if/else clauses of the outer if statement.
CommonIfInIfElseCleanUp_reason=It reduces the coding, reading, debugging and testing cost. It also reduces the size of the source code and the binaries.
StringBuilderCleanUp_name=StringBuilder
StringBuilderCleanUp_description=Refactors to a proper use of StringBuilders:\n- replace String concatenations using operator '+' as parameters of StringBuffer/StringBuilder.append(),\n- replace chained call to StringBuffer/StringBuilder constructor followed by calls to append() and call toString() with straight String concatenation using operator '+'.
StringBuilderCleanUp_reason=It improves the time and space performance. It also improves the readability. String concatenation is automatically converted as StringBuilder at compile time so it is useless. Literal concatenation is automatically converted as a single literal at compile time.
TruncatingAppendingRatherThanSubCharactersCleanUp_name=Truncating appending rather than sub-characters
TruncatingAppendingRatherThanSubCharactersCleanUp_description=Use the specific StringBuffer/StringBuilder.append() methods with their parameter to truncate strings
TruncatingAppendingRatherThanSubCharactersCleanUp_reason=It improves the readability. It also reduces the size of the source code and the binaries.
StringBuilderMethodRatherThanReassignationCleanUp_name=StringBuilder method call rather than reassignment
StringBuilderMethodRatherThanReassignationCleanUp_description=Removes the assignment to the same variable on a StringBuilder.append() call.
StringBuilderMethodRatherThanReassignationCleanUp_reason=It reduces the code to focus the attention on code that matters. It also reduces the size of the source code and the binaries.
StringBuilderRatherThanStringBufferCleanUp_name=StringBuilder rather than StringBuffer
StringBuilderRatherThanStringBufferCleanUp_description=Replace StringBuffer by StringBuilder when possible.
StringBuilderRatherThanStringBufferCleanUp_reason=It improves the time performance. It also upgrades legacy code.
ObsoleteStringBuilderRatherThanStringCleanUp_name=StringBuilder rather than String
ObsoleteStringBuilderRatherThanStringCleanUp_description=Replace String concatenation by StringBuilder when possible.
ObsoleteStringBuilderRatherThanStringCleanUp_reason=It improves the memory and time performance.
ObsoleteAtomicObjectRatherThanMonoIndexArrayCleanUp_name=Atomic object rather than mono index array
ObsoleteAtomicObjectRatherThanMonoIndexArrayCleanUp_description=Replace an array with one index by an atomic object.
ObsoleteAtomicObjectRatherThanMonoIndexArrayCleanUp_reason=To pass a value as a reference, you should use AtomicReference or another Atomic concurrent object. It's not the purpose of an array.
ObsoletePatternRatherThanRegExStringCleanUp_name=Pattern Rather Than RegEx String
ObsoletePatternRatherThanRegExStringCleanUp_description=Compile a regular expression before using it.
ObsoletePatternRatherThanRegExStringCleanUp_reason=It improves the time performance. It also disambiguate the types between regex and text.
OptimizeRegExCleanUp_name=Optimize RegEx
OptimizeRegExCleanUp_description=Detect strings that are used as regular expression and rewrite it in a more efficient way.
OptimizeRegExCleanUp_reason=It improves the time and space performance and avoid ReDOS attacks. It only optimizes regular expression for witch we are sure it is only used as regular expression.
CollectionsAddAllRatherThanAsListCleanUp_name=Collections.addAll() rather than Arrays.asList()
CollectionsAddAllRatherThanAsListCleanUp_description=Directly add an array content into a collection using Collections.addAll() instead of converting the array into a list and then add the elements into another collection.
CollectionsAddAllRatherThanAsListCleanUp_reason=It improves the time and space performance and the readability. It also reduces the size of the source code and the binaries.
HashMapRatherThanHashtableCleanUp_name=HashMap rather than Hashtable
HashMapRatherThanHashtableCleanUp_description=Replace Hashtable by HashMap when possible.
HashMapRatherThanHashtableCleanUp_reason=It improves the time performance.
ArrayListRatherThanVectorCleanUp_name=ArrayList rather than Vector
ArrayListRatherThanVectorCleanUp_description=Replace Vector by ArrayList when possible.
ArrayListRatherThanVectorCleanUp_reason=It improves the time performance.
ArrayDequeRatherThanStackCleanUp_name=ArrayDeque rather than Stack
ArrayDequeRatherThanStackCleanUp_description=Replace Stack by ArrayDeque when possible.
ArrayDequeRatherThanStackCleanUp_reason=It improves the time performance.
SetRatherThanMapCleanUp_name=Set rather than map
SetRatherThanMapCleanUp_description=Replace map by set when values are not read.
SetRatherThanMapCleanUp_reason=It simplify the code showing that the values are not used.
ArrayListRatherThanLinkedListCleanUp_name=ArrayList rather than LinkedList
ArrayListRatherThanLinkedListCleanUp_description=Replace LinkedList by ArrayList when no item is inserted or removed in the middle of the list.
ArrayListRatherThanLinkedListCleanUp_reason=It improves the time and space performance.
SetRatherThanListCleanUp_name=Set rather than List
SetRatherThanListCleanUp_description=Replace List by HashSet when only presence of items is used.
SetRatherThanListCleanUp_reason=It improves the space performance.
HashMapRatherThanTreeMapCleanUp_name=HashMap rather than TreeMap
HashMapRatherThanTreeMapCleanUp_description=Replace TreeMap by HashMap when the entry order is not used.
HashMapRatherThanTreeMapCleanUp_reason=It improves the time and the space performance.
HashSetRatherThanTreeSetCleanUp_name=HashSet rather than TreeSet
HashSetRatherThanTreeSetCleanUp_description=Replace TreeSet by HashSet when the entry order is not used.
HashSetRatherThanTreeSetCleanUp_reason=It improves the time and the space performance.
UseStringContainsCleanUp_name=Use String.contains()
UseStringContainsCleanUp_description=Replaces uses of String.indexOf(String) String.lastIndexOf(String) by String.contains(CharSequence) where appropriate.
UseStringContainsCleanUp_reason=It improves the readability of such simple code to spotlight the complexity of other code.
CommentsCleanUp_name=Comments
CommentsCleanUp_description=Refactors comments:\n- remove empty comments and javadocs,\n- transform comments applicable to java elements into javadocs,\n- transform javadocs that are not attached to any java elements into block comments,\n- remove IDE generated TODOs,\n- remove empty lines at start and end of javadocs and block comments,\n- uppercase first letter of javadocs,\n- collapse javadocs on a single line when allowed by Eclipse settings for formatting,\n- add final '.' to javadocs that do not have any,\n- remove Eclipse generated (non-Javadoc) block comments.
CommentsCleanUp_reason=It improves the readability.
RemoveFieldsDefaultValuesCleanUp_name=Remove fields default values
RemoveFieldsDefaultValuesCleanUp_description=Removes field initializers when they are the default value of the field's types.\nFor example, the initializer will be removed for integer fields initialized to "0".\nLikewise, the initializer will be removed for non primitive fields initialized to "null".
RemoveFieldsDefaultValuesCleanUp_reason=It reduces the code to focus the attention on the other non-default initializations. It also reduces the size of the source code and the binaries.
StaticConstantRatherThanInstanceConstantCleanUp_name=Static constant rather than instance constant
StaticConstantRatherThanInstanceConstantCleanUp_description=Add the static modifier to the initialized final primitive or wrapper fields.
StaticConstantRatherThanInstanceConstantCleanUp_reason=It improves the space performance.
ObsoleteRemoveOverriddenAssignmentCleanUp_name=Remove overridden assignment
ObsoleteRemoveOverriddenAssignmentCleanUp_description=Remove passive assignment when the variable is reassigned before being read.
ObsoleteRemoveOverriddenAssignmentCleanUp_reason=It improves the readability. It improves the time and the space performance. It also reduces the size of the source code and the binaries.
ObsoleteJava7HashRatherThanEclipseJava6HashCleanUp_name=Java 7 hash rather than Eclipse Java 6 hash
ObsoleteJava7HashRatherThanEclipseJava6HashCleanUp_description=Rewrites Eclipse-autogenerated hashcode method by Eclipse-autogenerated hashcode method for Java 7.
ObsoleteJava7HashRatherThanEclipseJava6HashCleanUp_reason=It improves readability. It does not improve performance. It upgrades legacy code. It also reduces the size of the source code and the binaries.
AnnotationCleanUp_name=Annotation
AnnotationCleanUp_description=Simplifies annotation uses:\n- empty parentheses will be removed from annotations,\n- single members named "value" will be removed from annotations and only the value will be left.
AnnotationCleanUp_reason=It improves the readability.
ObsoleteTryWithResourceCleanUp_name=Use try-with-resource
ObsoleteTryWithResourceCleanUp_description=Changes code to make use of Java 7 try-with-resources feature. In particular, it removes now useless finally clauses.
ObsoleteTryWithResourceCleanUp_reason=It improves the readability. It upgrades legacy code. It also reduces the size of the source code and the binaries.
OneTryRatherThanTwoCleanUp_name=One try rather than two
OneTryRatherThanTwoCleanUp_description=Merge two embedded try statements into one.
OneTryRatherThanTwoCleanUp_reason=It reduces the code and decreases the indentation so it improves the readability. It also reduces the size of the source code and the binaries.
TestNGAssertCleanUp_name=TestNG asserts
TestNGAssertCleanUp_description=Refactors to a proper use of TestNG assertions.
TestNGAssertCleanUp_reason=It improves the readability of the code and the report.
JupiterAssertCleanUp_name=Jupiter asserts
JupiterAssertCleanUp_description=Refactors to a proper use of JUnit 5 assertions.
JupiterAssertCleanUp_reason=It improves the readability of the code and the report.
JUnitAssertCleanUp_name=JUnit asserts
JUnitAssertCleanUp_description=Refactors to a proper use of JUnit assertions.
JUnitAssertCleanUp_reason=It improves the readability of the code and the report.
AssertJCleanUp_name=Assert J
AssertJCleanUp_description=Refactors to a proper use of Assert J assertions.
AssertJCleanUp_reason=It improves the readability of the code and the report.
SeparateAssertionsRatherThanBooleanExpressionCleanUp_name=Separate assertions rather than boolean expression
SeparateAssertionsRatherThanBooleanExpressionCleanUp_description=Refactors a true or a false assertion with respectively an AND or an OR operator into two separate assertions. It works for JUnit and TestNG.
SeparateAssertionsRatherThanBooleanExpressionCleanUp_reason=It adds information the report and save time to search the issues.
RemoveEmptyLinesCleanUp_name=Remove empty lines
RemoveEmptyLinesCleanUp_description=Removes unnecessary empty lines from source code:\n- empty lines after opening braces,\n- empty lines before closing braces,\n- two consecutive empty lines are converted to a single empty line.
RemoveEmptyLinesCleanUp_reason=It reduces code to focus attention on what matters.
ObsoleteRemoveEmptySuperConstrInvocationCleanUp_name=Remove super() call in constructor
ObsoleteRemoveEmptySuperConstrInvocationCleanUp_description=Remove call to super constructor with empty arguments since it is redundant. See JLS section 12.5 for more info.
ObsoleteRemoveEmptySuperConstrInvocationCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_name=Implicit default constructor rather than written one
ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_description=Remove single public constructor with no arguments, no annotation and no code.
ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_reason=It improves the readability of a such case to spotlight the complexity of other code. It also reduces the size of the source code and the binaries.
AndroidWakeLockCleanUp_name=Android WakeLock
AndroidWakeLockCleanUp_description=Android - Failing to release a wakelock properly can keep the Android device in a high power mode, which reduces battery life. There are several causes for this, such as releasing the wake lock in onDestroy() instead of in onPause(), failing to call release() in all possible code paths after an acquire(), and so on.
AndroidWakeLockCleanUp_reason=It improves the performance.
AndroidViewHolderCleanUp_name=Android ViewHolder
AndroidViewHolderCleanUp_description=Android - Optimize getView() routines for Android applications. It reduces the number calls to the costly inflate()) and getViewById() Android API methods.
AndroidViewHolderCleanUp_reason=It improves the performance.
LogParametersRatherThanLogMessageCleanUp_name=Log parameters rather than log message
LogParametersRatherThanLogMessageCleanUp_description=Replaces a string concatenation as parameter of a logger method by a string template followed by objects.
LogParametersRatherThanLogMessageCleanUp_reason=It improves the time performance. It also avoids some null pointers.
NamedMethodRatherThanLogLevelParameterCleanUp_name=Named method rather than log level parameter
NamedMethodRatherThanLogLevelParameterCleanUp_description=Replaces level parameter by the appropriate method for standard logging.
NamedMethodRatherThanLogLevelParameterCleanUp_reason=It improves readability. Level parameter should be used only for dynamic level.
EnumMapRatherThanHashMapCleanUp_name=EnumMap rather than HashMap for enum keys
EnumMapRatherThanHashMapCleanUp_description=Refactor implementation class HashMap -> EnumMap when key is an enum type. Beware! It changes the result of an instanceof expression!
EnumMapRatherThanHashMapCleanUp_reason=It improves the space performance.
EnumSetRatherThanHashSetCleanUp_name=EnumSet rather than HashSet for enum types
EnumSetRatherThanHashSetCleanUp_description=Converts creation of HashSet with enum as a type to invocation of static methods of EnumSet where possible. Beware! It changes the result of an instanceof expression!
EnumSetRatherThanHashSetCleanUp_reason=It improves the space performance.
RemoveUncheckedThrowsClausesCleanUp_name=Remove unchecked exceptions from throws clause
RemoveUncheckedThrowsClausesCleanUp_description=Remove unchecked exceptions from throws clause. Beware, the JavaDoc is not updated!
RemoveUncheckedThrowsClausesCleanUp_reason=It reduces code to focus attention on what matters.
ObsoleteUppercaseNumberSuffixRatherThanLowercaseCleanUp_name=Capitalize lower case 'l' -> 'L' for long 'f' -> 'F' for float number literals
ObsoleteUppercaseNumberSuffixRatherThanLowercaseCleanUp_description=Capitalize lower case 'l' -> 'L' for long 'f' -> 'F' for float number literals.
ObsoleteUppercaseNumberSuffixRatherThanLowercaseCleanUp_reason=It disambiguates the code to reduce bug hazard.
FormattedNumberRatherThanPackedNumberCleanUp_name=Formatted number rather than packed number
FormattedNumberRatherThanPackedNumberCleanUp_description=Add underscore for each thousand in number literals when it is obvious it is useful. Unfortunately, only few cases are obvious.
FormattedNumberRatherThanPackedNumberCleanUp_reason=It improves readability.
ObsoleteSwitchCleanUp_name=Switch
ObsoleteSwitchCleanUp_description=Switch related refactorings:\n- replaces if/else if/else blocks to use switch where possible.
ObsoleteSwitchCleanUp_reason=It reduces the coding, reading and debugging cost.
ObsoleteIfRatherThanTwoSwitchCasesCleanUp_name=If rather than two switch cases
ObsoleteIfRatherThanTwoSwitchCasesCleanUp_description=Replace a switch structure by an if block when there are less than three distinct cases. Beware! It may fix some null pointers, so it may change the behavior.
ObsoleteIfRatherThanTwoSwitchCasesCleanUp_reason=It improves readability. It also fixes SONAR alerts.
ObsoleteRemoveSemiColonCleanUp_name=Remove semicolons
ObsoleteRemoveSemiColonCleanUp_description=Removes superfluous semicolon after body declarations in type declarations.
ObsoleteRemoveSemiColonCleanUp_reason=It reduces code to focus attention on what matters. It also reduces the size of the source code and the binaries.
ObsoleteAddBracketsToControlStatementCleanUp_name=Add brackets to control statement
ObsoleteAddBracketsToControlStatementCleanUp_description=Adds brackets to:\n\
	- if then/else clauses,\n\
	- for loop body,\n\
	- do ... while loop body,\n\
	- while loop body.\n\
	Status: deprecated since eclipse 4.18 (2020-12), use eclipse cleanup "Use blocks always" instead
ObsoleteAddBracketsToControlStatementCleanUp_reason=It improves the readability and reduce the bug hazard.
RemoveUnnecessaryLocalBeforeReturnCleanUp_name=Remove unnecessary local before return
RemoveUnnecessaryLocalBeforeReturnCleanUp_description=Removes unnecessary local variable declaration or unnecessary variable assignment before a return statement.
RemoveUnnecessaryLocalBeforeReturnCleanUp_reason=It reduces code to focus attention on what matters. It improves time performance. It also reduces the size of the source code and the binaries.
ObsoleteRedundantModifiersCleanUp_name=Remove useless modifiers
ObsoleteRedundantModifiersCleanUp_description=Sorts modifiers.\n\
	Also removes modifiers implied by the context:\n\
	- "static" and "abstract" for interface,\n\
	- "public", "static" and "final" for interface fields,\n\
	- "public" and "abstract" for interface methods,\n\
	- "final" for private methods,\n\
	- "final" for parameters in interface method declarations,\n\
	- "protected" modifier for final class not inherited members.\n\
	Status: deprecated since eclipse 4.18 (2020-12), use eclipse "Remove redundant modifiers" cleanup instead
ObsoleteRedundantModifiersCleanUp_reason=It reduces code to focus attention on what matters.
ObsoleteStaticInnerClassThanNonStaticCleanUp_name=Static inner class than non-static
ObsoleteStaticInnerClassThanNonStaticCleanUp_description=Make inner class static if it doesn't use top level class members.\n\
	Status: obsolete since eclipse 4.19 (2021-03), use eclipse cleanup instead
ObsoleteStaticInnerClassThanNonStaticCleanUp_reason=It improves the space performance and it helps the code analysis.
ObsoleteRemoveUnnecessaryCastCleanUp_name=Remove unnecessary casts
ObsoleteRemoveUnnecessaryCastCleanUp_description=Removes unnecessary widening casts from return statements, assignments and infix expressions. Correctly types literals.
ObsoleteRemoveUnnecessaryCastCleanUp_reason=It reduces code to focus attention on what matters. It improves the time and the space performance. It also reduces the size of the source code and the binaries.
ObsoletePushNegationDownCleanUp_name=Push negation down
ObsoletePushNegationDownCleanUp_description=Pushes negations down, inside the negated expressions.
ObsoletePushNegationDownCleanUp_reason=It disambiguates the code to reduce bug hazard.
ObsoleteLocalVariableRatherThanFieldCleanUp_name=Local variable rather than field
ObsoleteLocalVariableRatherThanFieldCleanUp_description=Refactors a field into a local variable if its use is only local.
ObsoleteLocalVariableRatherThanFieldCleanUp_reason=It reduces code to focus attention on what matters. It also improves the time and the space performance.
ObsoleteSimpleNameRatherThanQualifiedNameCleanUp_name=Simple name rather than qualified name
ObsoleteSimpleNameRatherThanQualifiedNameCleanUp_description=Refactors types, method invocations and field accesses to replace qualified names by simple names when appropriate. For example when relevant imports exist.
ObsoleteSimpleNameRatherThanQualifiedNameCleanUp_reason=It reduces code to focus attention on what matters.
ObsoleteDoubleNegationCleanUp_name=Double negation
ObsoleteDoubleNegationCleanUp_description=Reduces double negation in boolean expression.
ObsoleteDoubleNegationCleanUp_reason=It improves the readability and the performance. It also reduces the size of the source code and the binaries.
RedundantTruthCleanUp_name=Redundant truth
RedundantTruthCleanUp_description=Directly checks boolean values instead of comparing them with true/false.
RedundantTruthCleanUp_reason=It improves the readability and the performance. It also reduces the size of the source code and the binaries.
RedundantBooleanCleanUp_name=Redundant boolean
RedundantBooleanCleanUp_description=Removes neutral operand in logical expression and removes unreachable operands.
RedundantBooleanCleanUp_reason=It improves the readability and the performance. It also reduces the size of the source code and the binaries.
ObsoleteEqualsNullableCleanUp_name=Equals nullable
ObsoleteEqualsNullableCleanUp_description=Removes redundant null checks or useless right-hand side or left-hand side operands.
ObsoleteEqualsNullableCleanUp_reason=It improves the readability and the performance. It also reduces the size of the source code and the binaries.
RemoveParenthesisCleanUp_name=Remove parenthesis
RemoveParenthesisCleanUp_description=Remove useless parentheses.
RemoveParenthesisCleanUp_reason=It improves the readability. It also reduces the size of the source code and the binaries.
